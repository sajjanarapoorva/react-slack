{"version":3,"sources":["base/firebase.js","components/UserInfo.js","store/actiontypes.js","store/actioncreator.js","components/Notification.js","components/Channels.js","components/Chat.js","components/FavChannel.js","components/Sidebar.js","components/Message/MessageHeader.js","components/Message/MessageContent.js","components/ImageUpload.js","components/Message/MessageInput.js","components/Message/Message.js","App.js","reportWebVitals.js","store/reducer.js","components/Register.js","components/Forgot_Paaword.js","components/Login.js","components/Loader.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","connect","state","user","currentUser","props","signOut","auth","then","console","log","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","avatar","displayName","options","key","text","disabled","onClick","SET_USER","SET_CHANNEL","SET_FAVOURITECHANNEL","REMOVE_FAVOURITECHANNEL","setChannel","channel","type","payload","currentChannel","Notification","messagesRef","database","ref","usersRef","useState","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","useEffect","child","uid","on","snap","val","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","reduce","item","push","timestamp","id","lastVisited","channelMessagesTimeStamp","notificationCount","filter","length","Label","color","calculateNotificationCount","notificationChannelId","dispatch","selectChannel","ModelOpenState","setModelOpenState","Name","Desc","channelAddState","setchannelAddState","isLoading","setisLoading","channelState","setchannelState","channelsRef","UserRef","currentState","updatedState","off","closeModel","setLatVisited","LatVisited","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","desc","created_by","update","catch","err","handleInput","e","target","value","Menu","style","marginTop","Item","fontSize","marginLeft","map","active","isFav","displayChannels","Modal","open","onClose","Form","Segment","stacked","Input","onChange","placeholder","Actions","Button","loading","UserState","setUserState","ConnectedUserState","setConnectedUserState","connectedRef","statusRef","isPrivatechat","userStatusRef","remove","index","indexOf","splice","selectUser","userTemp","generateId","userId","displayUsers","favouriteChannels","favouriteChannel","SideBar","vertical","fixed","borderless","size","Channels","MessageHeader","clearing","floated","fluid","channelName","starChange","starred","Subheader","uniqueUser","channelDesc","icon","searchChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","image","onLoad","imgLoaded","width","Text","content","ImageUpload","fileState","setfileState","acceptedTypes","basic","file","files","label","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setmessageState","fileDialogState","setfileDialogState","emojiState","setemojiState","downloadUrl","createMessageInfo","handleKeypress","onKeyPress","paddingRight","paddingBottom","labelPosition","position","bottom","right","onSelect","emoji","native","addEmoji","emojiSize","contentType","filePath","uuidv4","put","data","getDownloadURL","url","class","setfavouriteChannel","removefavouriteChannel","searchState","setsearchState","divRef","useRef","updatesState","scrollIntoView","behavior","filterBySearch","regex","RegExp","acc","match","isStared","FavRef","Group","messageToDisplay","displayMessage","currentEle","App","columns","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultUserState","defaultChannelState","defaultFavouriteChannelState","combinedReducers","combineReducers","action","Register","userCollectionRef","userName","email","password","confirmpassword","userState","setuserState","errorState","seterrorState","setIsLoading","isSuccess","setIsSuccess","event","currentuser","isFormEmpty","checkPassword","error","concat","updateuserDetails","createdUser","updateProfile","saveUserInDB","serverError","verticalAlign","textAlign","maxWidth","alt","createUserWithEmailAndPassword","iconPosition","backgroundColor","success","to","ForgotPassword","history","succState","setsuccState","handleForgotPassword","useCallback","a","preventDefault","elements","sendPasswordResetEmail","succ","Login","signInWithEmailAndPassword","AppLoader","Dimmer","Loader","store","createStore","IndexWithRouter","withRouter","setUser","onAuthStateChanged","location","pathname","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fd61d21.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nimport 'firebase/auth'\r\nimport 'firebase/storage'\r\nimport 'firebase/database'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDMMppYBvwaeI0US-aMle9r979XqjXzToc\",\r\n    authDomain: \"react-slack-e5339.firebaseapp.com\",\r\n    databaseURL: \"https://react-slack-e5339.firebaseio.com\",\r\n    projectId: \"react-slack-e5339\",\r\n    storageBucket: \"react-slack-e5339.appspot.com\",\r\n    messagingSenderId: \"891002544306\",\r\n    appId: \"1:891002544306:web:ea5b6ba6ac845df2b829ab\",\r\n    measurementId: \"G-GFTYJ8XR1D\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig)\r\n  firebase.analytics();\r\n\r\n  export default firebase\r\n\r\n","import React from 'react';\r\nimport { Grid, Header, Icon, Image, Dropdown } from 'semantic-ui-react';\r\nimport { connect } from \"react-redux\";\r\nimport firebase from '../base/firebase';\r\n\r\nimport \"./style.css\";\r\n\r\nconst UserInfo = (props) => {\r\n    // let userCollectionRef = firebase.database().ref('users');\r\n    // const [img, setimg] = useState([]);\r\n\r\n    const signOut = () => {\r\n        firebase.auth()\r\n            .signOut()\r\n            .then(() => console.log(\"user signed out\"));\r\n    }\r\n\r\n    const getDropDownOptions = () => {\r\n        return [\r\n        {\r\n            key: \"user\",\r\n            text : <span>Signed in as <strong>{props.user.displayName}</strong></span>,\r\n            disabled: true\r\n        },\r\n        {\r\n            key: \"avatar\",\r\n            text: <span><Icon name=\"edit\"></Icon>Change Avatar</span>\r\n        },\r\n        {\r\n            key: \"signout\",\r\n            text: <span onClick={signOut} >Sign Out</span>\r\n        }\r\n    ]\r\n    }\r\n\r\n\r\n    if (props.user) {\r\n        return (<Grid>\r\n            <Grid.Column>\r\n                <Grid.Row className=\"userinfo_grid_row\">\r\n                    <Header inverted as=\"h2\">\r\n                        {/* <img src=\"SDDw7CnuoUGax6x9mTo7dd.jpg\"></img> */}\r\n                        <Icon name=\"slack\" />\r\n                        <Header.Content>Slack</Header.Content>\r\n                     </Header>\r\n                    <Header className=\"userinfo_displayname\" inverted as=\"h4\">\r\n                        <Dropdown\r\n                            trigger={\r\n                                <span>\r\n                                    <Image src={props.user.photoURL} avatar></Image>\r\n                                    {/* <input type=\"file\" \r\n                                    id=\"img\"\r\n                                    onChange={handleImgChange}\r\n                                    hidden=\"hidden\"></input> */}\r\n                                    {props.user.displayName}\r\n                                </span>\r\n                            }\r\n                            options={getDropDownOptions()}\r\n                        >\r\n                        </Dropdown>\r\n\r\n                    </Header>\r\n                </Grid.Row>\r\n            </Grid.Column>\r\n        </Grid>)\r\n    }\r\n    return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserInfo);","\r\nexport const SET_USER = 'SET_USER'\r\n\r\nexport const SET_CHANNEL = 'SET_CHANNEL'\r\n\r\nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL'\r\n\r\nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL'","import { SET_USER, SET_CHANNEL ,SET_FAVOURITECHANNEL,REMOVE_FAVOURITECHANNEL} from './actiontypes';\r\n\r\nexport const setUser = (user) => {\r\n    return {\r\n        type: SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    }\r\n}\r\n\r\nexport const setChannel = (channel) => {\r\n    return {\r\n        type: SET_CHANNEL,\r\n        payload: {\r\n            currentChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setfavouriteChannel = (channel) => {\r\n    return {\r\n        type: SET_FAVOURITECHANNEL,\r\n        payload: {\r\n            favouriteChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const removefavouriteChannel = (channel) => {\r\n    return {\r\n        type: REMOVE_FAVOURITECHANNEL,\r\n        payload: {\r\n            favouriteChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\n\r\nimport firebase from \"../base/firebase\";\r\n\r\nconst Notification = (props) => {\r\n\r\n    const messagesRef = firebase.database().ref(\"messages\");\r\n\r\n    const usersRef = firebase.database().ref(\"users\");\r\n\r\n    const [channelsVisitedState, setChannelsVisitedState] = useState({});\r\n\r\n    const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.user) {\r\n            usersRef.child(props.user.uid).child('lastvisited').on('value', snap => {\r\n                setChannelsVisitedState(snap.val());\r\n            })\r\n\r\n            messagesRef.on('value', snap => {\r\n                let messages = snap.val();\r\n                let channelsId = Object?.keys(messages);\r\n                let messagesTimeStamp = {};\r\n                channelsId.forEach((channelId) => {\r\n                    let channelMessageKeys = Object.keys(messages[channelId]);\r\n                    channelMessageKeys.reduce((item) => {\r\n                        messagesTimeStamp[channelId] = [...messagesTimeStamp[channelId] || []];\r\n                        messagesTimeStamp[channelId].push(messages[channelId][item]?.timestamp);\r\n                    })\r\n                })\r\n                setMessagesTimeStampState(messagesTimeStamp);\r\n            })\r\n        }\r\n    }, [props.user]);\r\n\r\n    const calculateNotificationCount = (channelId) => {\r\n\r\n        if (channelsVisitedState && messagesTimeStampState && props.channel && props.channel.id !== channelId) {\r\n\r\n            let lastVisited = channelsVisitedState[channelId];\r\n\r\n            let channelMessagesTimeStamp = messagesTimeStampState[channelId];\r\n\r\n            if (channelMessagesTimeStamp) {\r\n                let notificationCount = channelMessagesTimeStamp.filter(timestamp => !lastVisited || lastVisited < timestamp).length;\r\n                return notificationCount === 0 ? null : <Label color=\"red\">{notificationCount}</Label>\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    return <>  {props.displayName} {calculateNotificationCount(props.notificationChannelId)} </>;\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Menu, Icon, Modal } from 'semantic-ui-react'\r\nimport { Form, Segment, Button } from 'semantic-ui-react'\r\nimport firebase from '../base/firebase'\r\nimport { setChannel } from '../store/actioncreator'\r\nimport Notification from './Notification'\r\n\r\nimport './style.css'\r\n\r\nconst Channel = (props) => {\r\n\r\n    const [ModelOpenState, setModelOpenState] = useState(false)\r\n    const [channelAddState, setchannelAddState] = useState({ Name: '', Desc: '' })\r\n    const [isLoading, setisLoading] = useState(false)\r\n    const [channelState, setchannelState] = useState([])\r\n    const channelsRef = firebase.database().ref(\"channels\")\r\n    const UserRef = firebase.database().ref(\"users\")\r\n\r\n\r\n    useEffect(() => {\r\n        channelsRef.on('child_added', (snap) => {\r\n            setchannelState((currentState) => {\r\n                let updatedState = [...currentState]\r\n                updatedState.push(snap.val())\r\n                return updatedState\r\n            })\r\n        })\r\n        return()=>channelsRef.off();\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        if(channelState.length>0){\r\n            props.selectChannel(channelState[0])\r\n        }\r\n    },[!props.channel ? channelState:null])\r\n\r\n\r\n    const openModel = () => {\r\n        setModelOpenState(true)\r\n    }\r\n\r\n\r\n    const closeModel = () => {\r\n        setModelOpenState(false)\r\n    }\r\n\r\n    const checkFormValid = () => {\r\n        return channelAddState && channelAddState.Name && channelAddState.Desc\r\n    }\r\n\r\n    const displayChannels = () => {\r\n        if (channelState.length > 0) {\r\n            return channelState.map((channel) => {\r\n                return <Menu.Item\r\n                    key={channel.id}\r\n                    name={channel.name}\r\n                    onClick={()=>{selectChannel(channel)}}\r\n                    active={props.channel && channel.id===props.channel.id && !props.channel.isFav}\r\n                >\r\n                    <Notification user={props.user} channel={props.channel} notificationChannelId={channel.id}\r\n                    displayName={'# '+ channel.name}\r\n                    />\r\n                   \r\n                </Menu.Item>\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectChannel=(channel)=>{\r\n        setLatVisited(props.user,props.channel)\r\n        setLatVisited(props.user,channel)\r\n        props.selectChannel(channel)\r\n\r\n    }\r\n\r\n    const setLatVisited=(user,channel)=>{\r\n        const LatVisited=UserRef.child(user.uid).child(\"lastvisited\").child(channel.id);\r\n        LatVisited.set(firebase.database.ServerValue.TIMESTAMP)\r\n        LatVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP)\r\n    }\r\n\r\n\r\n    const onSubmit = () => {\r\n        if (!checkFormValid()) {\r\n            return\r\n        }\r\n        const key = channelsRef.push().key;\r\n        const channel = {\r\n            id: key,\r\n            name: channelAddState.Name,\r\n            desc: channelAddState.Desc,\r\n            created_by: {\r\n                name: props.user.displayName,\r\n                avatar: props.user.photoURL\r\n            }\r\n        }\r\n        setisLoading(true)\r\n        channelsRef.child(key).update(channel).then(() => {\r\n            setchannelAddState({ Name: \"\", Desc: \"\" })\r\n            setisLoading(false)\r\n            closeModel()\r\n            console.log(\"saved\");\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n    const handleInput = (e) => {\r\n        let target = e.target;\r\n        setchannelAddState((currentState) => {\r\n            let updatedState = { ...currentState };\r\n            updatedState[target.name] = target.value;\r\n            return updatedState;\r\n        })\r\n    }\r\n\r\n    return <><Menu.Menu style={{marginTop:\"35px\"}}>\r\n        <Menu.Item style={{fontSize:\"17px\"}}>\r\n            <span>\r\n                <Icon name=\"exchange\"></Icon>Channels\r\n            </span>\r\n            ({channelState.length})\r\n            <span style={{marginLeft:\"20px\"}} onClick={openModel}>\r\n                <Icon name=\"add circle\">\r\n                </Icon>\r\n            </span>\r\n        \r\n        </Menu.Item>\r\n        {displayChannels()}\r\n\r\n    </Menu.Menu>\r\n        <Modal open={ModelOpenState} onClose={closeModel}>\r\n            <Modal.Header>\r\n                Create Channel\r\n        </Modal.Header>\r\n\r\n            <Modal.Content>\r\n                <Form onSubmit={onSubmit}>\r\n                    <Segment stacked>\r\n                        <Form.Input\r\n                            name=\"Name\"\r\n                            \r\n                            value={channelAddState.Name}\r\n                            onChange={handleInput}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Channel Name\"\r\n                        />\r\n                        <Form.Input\r\n                            name=\"Desc\"\r\n                            value={channelAddState.Desc}\r\n                            onChange={handleInput}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Channel Description\"\r\n                        />\r\n                    </Segment>\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button loading={isLoading} onClick={onSubmit}>\r\n                    <Icon name=\"checkmark\" /> Save\r\n                </Button>\r\n                <Button onClick={closeModel}>\r\n                    <Icon name=\"remove\" /> Cancel\r\n                </Button>\r\n            </Modal.Actions>\r\n\r\n        </Modal>\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        channel:state.channel.currentChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectChannel:(channel)=>dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Channel)\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\nimport firebase from '../base/firebase'\r\nimport { setChannel } from '../store/actioncreator'\r\nimport Notification from './Notification'\r\n\r\n\r\nconst Chat = (props) => {\r\n    const [UserState, setUserState] = useState([])\r\n    const [ConnectedUserState, setConnectedUserState] = useState([])\r\n    const UserRef = firebase.database().ref(\"users\")\r\n    const connectedRef =firebase.database().ref(\".info/connected\")\r\n    const statusRef=firebase.database().ref(\"status\")\r\n\r\n    useEffect(() => {\r\n        UserRef.on('child_added', (snap) => {\r\n            setUserState((currentState) => {\r\n                let updatedState = [...currentState]\r\n                let user=snap.val();\r\n                user.name=user.displayName\r\n                user.id=snap.key\r\n                user.isPrivatechat=true\r\n                updatedState.push(user)\r\n                return updatedState\r\n            })\r\n        })\r\n        connectedRef.on(\"value\",snap=>{\r\n            if(props.user && snap.val()){\r\n                const userStatusRef=statusRef.child(props.user.uid)\r\n                userStatusRef.set(true)\r\n                userStatusRef.onDisconnect().remove()\r\n            }\r\n        })\r\n\r\n        return()=>{UserRef.off(); connectedRef.off()}\r\n    }, [props.user])\r\n\r\n    useEffect(()=>{\r\n        statusRef.on(\"child_added\",snap=>{\r\n            setConnectedUserState((currentState)=>{\r\n                let updatedState=[...currentState]\r\n                updatedState.push(snap.key)\r\n                return updatedState\r\n            })\r\n        })\r\n\r\n        statusRef.on(\"child_removed\",snap=>{\r\n            setConnectedUserState((currentState)=>{\r\n                let updatedState=[...currentState]\r\n                let index=updatedState.indexOf(snap.key)\r\n                updatedState.splice(index,1)\r\n                return updatedState\r\n            })\r\n        })\r\n        return()=>statusRef.off()\r\n\r\n    },[UserState])\r\n\r\n\r\n\r\n    const displayUsers = () => {\r\n        // console.log(props.displaygName);\r\n        if (UserState.length > 0) {\r\n            return UserState.filter((user) => user.id!==props.user?.uid).map((user)=>{\r\n                return <Menu.Item\r\n                    key={user.id}\r\n                    name={user.name}\r\n                    onClick={()=>{selectUser(user)}}\r\n                    active={props.channel && generateId(user.id)===props.channel.id}\r\n                >\r\n                    <Icon name=\"circle\" color={`${ConnectedUserState.indexOf(user.id)!==-1 ? \"green\":\"red\"}`}></Icon>\r\n                    \r\n                    <Notification user={props.user} channel={props.channel} notificationChannelId={generateId(user.id)}\r\n                    displayName={'@ '+user.name}\r\n                    />\r\n                </Menu.Item>\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectUser=(user)=>{\r\n        let userTemp={\r\n            ...user\r\n        }\r\n        userTemp.id=generateId(user.id)\r\n        setLatVisited(props.user,props.channel)\r\n        setLatVisited(props.user,userTemp)\r\n        props.selectChannel(userTemp)\r\n\r\n    }\r\n\r\n    const setLatVisited=(user,channel)=>{\r\n        const LatVisited=UserRef.child(user?.uid).child(\"lastvisited\").child(channel.id);\r\n        LatVisited.set(firebase.database.ServerValue.TIMESTAMP)\r\n        LatVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP)\r\n    }\r\n\r\n    const generateId=(userId)=>{\r\n        if(props.user?.uid < userId){\r\n            return props.user?.uid + userId\r\n        }\r\n            else{\r\n                return userId+props.user?.uid\r\n            }\r\n        \r\n    }\r\n\r\n    return <Menu.Menu style={{marginTop:\"35px\"}}>\r\n        <Menu.Item style={{fontSize:\"17px\"}}>\r\n            <span>\r\n                <Icon name=\"mail\"></Icon>Direct Messages\r\n            </span>\r\n        ({UserState.length -1})\r\n        </Menu.Item>\r\n        {displayUsers()}\r\n    </Menu.Menu>\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        channel:state.channel.currentChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectChannel:(channel)=>dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Chat)\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\nimport { setChannel } from '../store/actioncreator'\r\n\r\n\r\nconst FavChannels = (props) => {\r\n    \r\n    const displayChannels = () => {\r\n        if (Object.keys(props.favouriteChannels).length > 0) {\r\n            return Object.keys(props.favouriteChannels).map((channelId)=>{\r\n                return <Menu.Item\r\n                    key={channelId}\r\n                    name={props.favouriteChannels[channelId]}\r\n                    onClick={()=>{props.selectChannel({id:channelId,name:props.favouriteChannels[channelId],isFav:true})}}\r\n                    active={props.channel && channelId===props.channel.id && props.channel.isFav}\r\n                >\r\n                    {'# '+props.favouriteChannels[channelId]}\r\n                </Menu.Item>\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return <Menu.Menu>\r\n        <Menu.Item style={{fontSize:\"17px\"}}>\r\n            <span>\r\n                <Icon name=\"star\"></Icon>Starred\r\n            </span>\r\n        ({Object.keys(props.favouriteChannels).length })\r\n        </Menu.Item>\r\n        {displayChannels()}\r\n    </Menu.Menu>\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel:state.channel.currentChannel,\r\n        favouriteChannels:state.favouriteChannel.favouriteChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectChannel:(channel)=>dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(FavChannels)\r\n\r\n","import React from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport UserInfo from \"./UserInfo\";\r\nimport Channels from \"./Channels\";\r\nimport PrivateChat from \"./Chat\";\r\nimport FavouriteChannels from \"./FavChannel\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const SideBar = () => {\r\n    return (<Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\r\n        <UserInfo />\r\n        <FavouriteChannels />\r\n        <Channels />\r\n        <PrivateChat />\r\n    </Menu>\r\n    )\r\n}","import React from 'react';\r\nimport { Segment, Header, Input, Icon } from 'semantic-ui-react';\r\n\r\nconst MessageHeader = (props) => {\r\n    return <Segment clearing>\r\n        <Header floated=\"left\" fluid=\"true\" as=\"h2\">\r\n            <span>\r\n                {(props.isPrivatechat ?\"@ \": \"# \")+ props.channelName}\r\n                {!props.isPrivatechat &&  <Icon onClick={props.starChange} \r\n                name={props.starred ? \"star\" :\"star outline\"}\r\n                color={props.starred ? \"yellow\" :\"black\"}\r\n                ></Icon>}\r\n            </span>\r\n        <Header.Subheader><Icon name=\"user outline\"></Icon>{props.uniqueUser} | {props.channelDesc}\r\n        </Header.Subheader> \r\n        </Header>\r\n        <Header floated=\"right\">\r\n            <Input\r\n                name=\"search\"\r\n                icon=\"search\"\r\n                placeholder=\"Search Messages\"\r\n                size=\"mini\"\r\n                onChange={props.searchChange}\r\n            />\r\n        </Header>\r\n    </Segment>\r\n}\r\n\r\nexport default MessageHeader;","import React from 'react';\r\nimport { Comment,Image } from 'semantic-ui-react'\r\nimport TimeAgo from 'javascript-time-ago'\r\nimport en from 'javascript-time-ago/locale/en'\r\nimport '../style.css'\r\n\r\nTimeAgo.locale(en)\r\nconst timeAgo=new TimeAgo();\r\n\r\nconst MessageContent = (props) => {\r\n    // console.log(props.message.user.name);\r\n    return <Comment>\r\n        <Comment.Avatar src={props.message.user.avatar} />\r\n        <Comment.Content style={{fontSize:\"15px\"}} className={props.ownMessage ? \"ownMessage\": null}>\r\n            <Comment.Author>{props.message.user.name}</Comment.Author>\r\n            <Comment.Metadata>{timeAgo.format(props.message.timestamp)}</Comment.Metadata>\r\n            {props.message.image ? <Image onLoad={props.imgLoaded} src={props.message.image} style={{width:\"60%\"}}></Image>:\r\n            <Comment.Text>{props.message.content}</Comment.Text>\r\n            }\r\n        </Comment.Content>\r\n    </Comment>\r\n}\r\n\r\nexport default MessageContent;","import React, { useState } from 'react'\r\nimport {Button, Icon, Input, Modal} from 'semantic-ui-react'\r\nimport mime from 'mime-types'\r\n\r\nconst ImageUpload=(props)=>{\r\n\r\n    const [fileState,setfileState]=useState(null)\r\n    const acceptedTypes = [\"image/png\", \"image/jpeg\"]\r\n\r\n    const onFileAdded=(e)=>{\r\n        const file=e.target.files[0]\r\n        if(file){\r\n            setfileState(file)\r\n        }\r\n    }\r\n\r\n    const onSubmit=()=>{\r\n\r\n        if (fileState && acceptedTypes.includes(mime.lookup(fileState.name))) {\r\n            props.uploadImage(fileState, mime.lookup(fileState.name));\r\n            props.onClose();\r\n            setfileState(null);\r\n        }\r\n\r\n    }\r\n    return(\r\n        <Modal basic open={props.open} onClose={props.onClose}>\r\n        <Modal.Header>Select a Image</Modal.Header>\r\n        <Modal.Content>\r\n            <Input\r\n            fluid\r\n            type=\"file\"\r\n            name=\"file\"\r\n            onChange={onFileAdded}\r\n            label=\"File Type (png , jpeg)\"\r\n            >\r\n            </Input>\r\n            \r\n        </Modal.Content>\r\n\r\n        <Modal.Actions>\r\n            <Button color=\"green\" onClick={onSubmit}>\r\n                <Icon name=\"checkmark\"></Icon>ADD\r\n            </Button>\r\n            <Button color=\"red\" onClick={props.onClose}>\r\n                <Icon name=\"remove\"></Icon>Cancel\r\n            </Button>\r\n        </Modal.Actions>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ImageUpload","import React, {  useState } from 'react';\r\nimport { Segment, Input, Button } from 'semantic-ui-react';\r\nimport firebase from '../../base/firebase'\r\nimport { connect } from 'react-redux'\r\nimport ImageUpload from '../ImageUpload'\r\nimport uuidv4 from 'uuid/dist/v4'\r\n// import Picker from 'emoji-picker-react';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\n\r\nimport '../style.css'\r\n\r\n\r\nconst MessageInput = (props) => {\r\n    const messageRef = firebase.database().ref('messages');\r\n    const storageRef = firebase.storage().ref();\r\n    const [messageState, setmessageState] = useState('');\r\n    const [fileDialogState, setfileDialogState] = useState(false);\r\n    const [emojiState, setemojiState] = useState(false);\r\n\r\n\r\n    const createMessageInfo = (downloadUrl) => {\r\n        return {\r\n            user: {\r\n                avatar: props.user.photoURL,\r\n                name: props.user.displayName,\r\n                id: props.user.uid\r\n            },\r\n            content: messageState,\r\n            image: downloadUrl || \"\",\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP\r\n        }\r\n    }\r\n\r\n    const onSubmit = (downloadUrl) => {\r\n        if (messageState || downloadUrl) {\r\n            messageRef.child(props.channel.id).push().set(createMessageInfo(downloadUrl)).then(() => {\r\n                setmessageState(\"\")\r\n                console.log(\"sent\");\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n\r\n    const onMessageChange = (e) => {\r\n        const target = e.target;\r\n        setmessageState(target.value)\r\n    }\r\n    const handleKeypress = e => {\r\n        //it triggers by pressing the enter key\r\n        console.log(e.key);\r\n        if (e.key === \"Enter\") {\r\n            return onSubmit();\r\n        }\r\n    };\r\n\r\n    const handleEmojiPicker = () => {\r\n        if (!emojiState) {\r\n            setemojiState(true)\r\n        }\r\n        else {\r\n            setemojiState(false)\r\n        }\r\n    }\r\n\r\n    const addEmoji = (emoji) => {\r\n        setmessageState(messageState + emoji.native)\r\n    }\r\n\r\n\r\n\r\n    // const createActionButtons = () => {\r\n    //     return <>\r\n    //         <Button icon=\"send\" onClick={() => { onSubmit() }} />\r\n    //         <Button icon=\"upload\" onClick={() => setfileDialogState(true)} />\r\n    //         {/* <Button icon=\"smile outline\" onClick={handleEmojiPicker} />\r\n    //         {emojiState ? (\r\n    //             <Picker style={{ position: 'absolute', bottom: '40px', right: '20px' }} onKeyPress={handleKeypress} onSelect={(emoji) => { addEmoji(emoji) }} emojiSize={20} />) : null} */}\r\n    //     </>\r\n    // }\r\n\r\n    const uploadImage = (file, contentType) => {\r\n        const filePath = `chat/images/${uuidv4()}.jpg`;\r\n        storageRef.child(filePath).put(file, { contentType: contentType }).then(\r\n            (data) => {\r\n                data.ref.getDownloadURL().then((url) => {\r\n                    onSubmit(url)\r\n                })\r\n            }\r\n        ).catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    return <Segment >\r\n        <Input \r\n            onChange={onMessageChange}\r\n            onKeyPress={handleKeypress}\r\n            name=\"message\"\r\n            style={{width:\"95%\",paddingRight:\"5px\",paddingBottom:\"10px\"}}\r\n            value={messageState}\r\n            placeholder=\"Write Your Message\"\r\n            // label={createActionButtons()}\r\n            labelPosition=\"right\"\r\n        ></Input>\r\n        <Button icon=\"smile outline\" onClick={handleEmojiPicker} size=\"medium\"/>\r\n        {emojiState ? (\r\n            <Picker style={{ position: 'absolute', bottom: '100px', right: '20px' }} onKeyPress={handleKeypress} onSelect={(emoji) => { addEmoji(emoji) }} emojiSize={20} />) : null}\r\n        <ImageUpload uploadImage={uploadImage} open={fileDialogState} onClose={() => setfileDialogState(false)} />\r\n\r\n        <div class=\"ui icon two buttons\" >\r\n        <Button icon=\"send\" content=\"Add Reply\" color=\"orange\" onClick={() => { onSubmit() }} />\r\n        <Button icon=\"upload\" content=\"Upload Media\"color=\"blue\" onClick={() => setfileDialogState(true)} />\r\n\r\n            {/* <button class=\"ui orange icon left labeled button\"><i aria-hidden=\"true\" class=\"edit icon\"></i>Add Reply</button> */}\r\n            {/* <button class=\"ui teal icon right labeled button\"><i aria-hidden=\"true\" class=\"cloud upload icon\"></i>Upload Media</button> */}\r\n            </div>\r\n    </Segment>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        channel: state.channel.currentChannel\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MessageInput);\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Segment, Comment } from 'semantic-ui-react';\r\nimport MessageHeader from '../Message/MessageHeader'\r\nimport MessageContent from '../Message/MessageContent'\r\nimport MessageInput from '../Message/MessageInput'\r\nimport firebase from '../../base/firebase'\r\nimport { connect } from 'react-redux'\r\nimport { setfavouriteChannel, removefavouriteChannel } from '../../store/actioncreator'\r\nimport '../style.css'\r\n\r\n\r\nconst Message = (props) => {\r\n    const messageRef = firebase.database().ref('messages')\r\n\r\n    const usersRef = firebase.database().ref('users')\r\n\r\n    const [messageState, setmessageState] = useState([]);\r\n    const [searchState, setsearchState] = useState(\"\");\r\n\r\n    let divRef = useRef()\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.channel) {\r\n            setmessageState([]);\r\n            messageRef.child(props.channel.id).on('child_added', (snap) => {\r\n                setmessageState((currentState) => {\r\n                    let updatesState = [...currentState];\r\n                    updatesState.push(snap.val())\r\n                    return updatesState\r\n                })\r\n            })\r\n\r\n            return () => messageRef.child(props.channel.id).off()\r\n        }\r\n    }, [props.channel])\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.user) {\r\n\r\n            usersRef.child(props.user.uid).child('favourite').on('child_added', (snap) => {\r\n\r\n                props.setfavouriteChannel(snap.val())\r\n\r\n            })\r\n\r\n            usersRef.child(props.user.uid).child('favourite').on(\"child_removed\", (snap) => {\r\n                props.removefavouriteChannel(snap.val())\r\n\r\n            })\r\n\r\n            return () => usersRef.child(props.user.uid).child('favourite').off()\r\n        }\r\n    }, [props.channel])\r\n\r\n\r\n    useEffect(()=> {\r\n        divRef.scrollIntoView({behavior : 'smooth'});\r\n    },[messageState])\r\n\r\n\r\n    const imgLoaded=()=>{\r\n        divRef.scrollIntoView({behavior : 'smooth'});\r\n\r\n    }\r\n\r\n\r\n\r\n    const displayMessage = () => {\r\n        let messageToDisplay = searchState ? filterBySearch() : messageState;\r\n\r\n        if (messageToDisplay.length > 0) {\r\n            return messageToDisplay.map((message) => {\r\n                return <MessageContent key={message.timestamp} message={message} ownMessage={message.user?.id === props.user?.uid} imgLoaded={imgLoaded}>\r\n                </MessageContent>\r\n            })\r\n        }\r\n    }\r\n    const uniqueUserCount = () => {\r\n        const uniqueUsers = messageState.reduce((acc, message) => {\r\n            if (!acc.includes(message.user.name)) {\r\n                acc.push(message.user.name);\r\n            }\r\n            return acc\r\n        }, [])\r\n\r\n        return uniqueUsers.length\r\n    }\r\n\r\n    const searchChange = (e) => {\r\n        const target = e.target\r\n        setsearchState(target.value)\r\n\r\n    }\r\n\r\n    const filterBySearch = () => {\r\n        const regex = new RegExp(searchState, \"gi\")\r\n        const messages = messageState.reduce((acc, message) => {\r\n            console.log();\r\n            if ((message.content && message.content.match(regex)) || (message.user.name.match(regex))) {\r\n                acc.push(message);\r\n            }\r\n            return acc\r\n        }, [])\r\n\r\n        return messages\r\n\r\n    }\r\n\r\n    const starChange = () => {\r\n        let FavRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id);\r\n        if (isStared()) {\r\n            FavRef.remove();\r\n\r\n        }\r\n        else {\r\n            FavRef.set({ channelId: props.channel.id, channelName: props.channel.name })\r\n        }\r\n    }\r\n\r\n    const isStared = () => {\r\n        return Object.keys(props.favouriteChannels).includes(props.channel?.id)\r\n\r\n    }\r\n\r\n    return <div className=\"messages\">\r\n        <MessageHeader channelDesc={props.channel?.desc} channelName={props.channel?.name} uniqueUser={uniqueUserCount()} searchChange={searchChange} isPrivatechat={props.channel?.isPrivatechat}\r\n            starChange={starChange} starred={isStared()}\r\n        />\r\n        <Segment className=\"messagecontent\">\r\n            <Comment.Group>\r\n                {displayMessage()}\r\n                <div ref={currentEle => divRef = currentEle}></div>\r\n            </Comment.Group>\r\n        </Segment>\r\n        <MessageInput />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel: state.channel.currentChannel,\r\n        user: state.user.currentUser,\r\n        favouriteChannels: state.favouriteChannel.favouriteChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\r\n        removefavouriteChannel: (channel) => dispatch(removefavouriteChannel(channel))\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);","import React from 'react';\r\nimport { SideBar } from \"./components/Sidebar\";\r\nimport Messages from \"./components/Message/Message\"\r\n\r\nimport './App.css';\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\nfunction App() {\r\n  return (\r\n    <Grid columns=\"equal\">\r\n      <SideBar />\r\n      <Grid.Column className=\"messagepanel\">\r\n        <Messages />\r\n      </Grid.Column>\r\n      <Grid.Column width={3}>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\nexport default  App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { SET_USER, SET_CHANNEL, SET_FAVOURITECHANNEL, REMOVE_FAVOURITECHANNEL } from './actiontypes';\r\nimport { combineReducers } from \"redux\";\r\n\r\nlet defaultUserState = {\r\n    currentUser: null\r\n}\r\n\r\nconst userReducer = (state = defaultUserState, action) => {\r\n    if (action.type === SET_USER) {\r\n        let payload = action.payload;\r\n        state = { ...payload };\r\n        return state;\r\n    }\r\n    return state;\r\n}\r\n\r\nlet defaultChannelState={\r\n    currentChannel:null,\r\n    loading:true\r\n}\r\n\r\nconst channelReducer = (state = defaultChannelState, action) => {\r\n    if (action.type === SET_CHANNEL) {\r\n        let payload = action.payload;\r\n        state = { ...payload };\r\n        state.loading=false;\r\n        return state;\r\n    }\r\n    return state;\r\n}\r\n\r\nlet defaultFavouriteChannelState={\r\n    favouriteChannel:{}\r\n}\r\n\r\nconst favouriteChannelReducer = (state = defaultFavouriteChannelState, action) => {\r\n    if (action.type === SET_FAVOURITECHANNEL) {\r\n        let payload = action.payload.favouriteChannel;\r\n        let updatedState = { ...state.favouriteChannel };\r\n        updatedState[payload.channelId]=payload.channelName\r\n        return {favouriteChannel: updatedState};\r\n    }\r\n\r\n    else  if (action.type === REMOVE_FAVOURITECHANNEL) {\r\n        let payload = action.payload.favouriteChannel;\r\n        let updatedState = { ...state.favouriteChannel };\r\n        delete updatedState[payload.channelId]\r\n        return {favouriteChannel: updatedState};\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nexport const combinedReducers = combineReducers({ user: userReducer ,channel:channelReducer,favouriteChannel:favouriteChannelReducer })","import React, { useState } from 'react';\r\nimport { Grid, Form, Segment, Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css'\r\nimport firebase from '../base/firebase';\r\n\r\nconst Register = () => {\r\n    let user = {\r\n        userName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmpassword: ''\r\n    }\r\n\r\n    let errors = [];\r\n\r\n    let userCollectionRef = firebase.database().ref('users');\r\n\r\n    const [userState, setuserState] = useState(user);\r\n    const [errorState, seterrorState] = useState(errors);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n    const handleInput = (event) => {\r\n        let target = event.target;\r\n        setuserState((currentState) => {\r\n            let currentuser = { ...currentState };\r\n            currentuser[target.name] = target.value;\r\n            return currentuser;\r\n        })\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (isFormEmpty()) {\r\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\r\n            return false;\r\n        }\r\n        else if (!checkPassword()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const isFormEmpty = () => {\r\n        return !userState.userName.length ||\r\n            !userState.password.length ||\r\n            !userState.confirmpassword.length ||\r\n            !userState.email.length;\r\n    }\r\n\r\n    const checkPassword = () => {\r\n        if (userState.password.length < 8) {\r\n            seterrorState((error) => error.concat({ message: \"Password length should be greater than 8\" }));\r\n            return false;\r\n        }\r\n        else if (userState.password !== userState.confirmpassword) {\r\n            seterrorState((error) => error.concat({ message: \"Password and Confirm Password does not match\" }));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        seterrorState(() => []);\r\n        setIsSuccess(false);\r\n        if (checkForm()) {\r\n            setIsLoading(true);\r\n            firebase.auth()\r\n                .createUserWithEmailAndPassword(userState.email, userState.password)\r\n                .then(createdUser => {\r\n                    setIsLoading(false);\r\n                    updateuserDetails(createdUser);\r\n                    console.log(createdUser);\r\n                })\r\n\r\n                .catch(serverError => {\r\n                    setIsLoading(false);\r\n                    seterrorState((error) => error.concat(serverError));\r\n                    console.log(serverError);\r\n                })\r\n        }\r\n    }\r\n\r\n    const updateuserDetails = (createdUser) => {\r\n        if (createdUser) {\r\n            setIsLoading(true);\r\n            createdUser.user\r\n                .updateProfile({\r\n                    displayName: userState.userName,\r\n                    photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`\r\n                })\r\n                .then(() => {\r\n                    setIsLoading(false);\r\n                    saveUserInDB(createdUser);\r\n                })\r\n                .catch((serverError) => {\r\n                    setIsLoading(false);\r\n                    seterrorState((error) => error.concat(serverError));\r\n                })\r\n        }\r\n    }\r\n\r\n    const saveUserInDB = (createdUser) => {\r\n        setIsLoading(true);\r\n        userCollectionRef.child(createdUser.user.uid).set({\r\n            displayName: createdUser.user.displayName,\r\n            photoURL: createdUser.user.photoURL\r\n        }).then(() => {\r\n            setIsLoading(false);\r\n            setIsSuccess(true);\r\n        })\r\n            .catch(serverError => {\r\n                setIsLoading(false);\r\n                seterrorState((error) => error.concat(serverError));\r\n            })\r\n    }\r\n\r\n    const formaterrors = () => {\r\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\r\n    }\r\n\r\n    return (<Grid verticalAlign=\"top\" textAlign=\"center\" className=\"grid-form\" >\r\n        <Grid.Column style={{ maxWidth: '500px' }}>\r\n            <img src=\"Screen-Shot-2019-01-17-at-2.29.34-PM.png\" alt=\"logo\" style={{ marginTop: \"50px\", width: \"40%\" }}></img>\r\n            <p className=\"p-refreshed_page__heading\">Create Account</p>\r\n            <p className=\"p-refreshed_page__sub_heading\">We suggest using the email address you use at work.</p>\r\n            <Form onSubmit={onSubmit}>\r\n                <Segment stacked>\r\n                    <Form.Input\r\n                        name=\"userName\"\r\n                        value={userState.userName}\r\n                        icon=\"user\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"text\"\r\n                        placeholder=\"User Name\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"email\"\r\n                        value={userState.email}\r\n                        icon=\"mail\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"email\"\r\n                        placeholder=\"User Email\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"password\"\r\n                        value={userState.password}\r\n                        icon=\"lock\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"password\"\r\n                        placeholder=\"User Password\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"confirmpassword\"\r\n                        value={userState.confirmpassword}\r\n                        icon=\"lock\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm Password\"\r\n                    />\r\n                </Segment>\r\n                {/* <Button disabled={isLoading} loading={isLoading} >Sign In with Email</Button> */}\r\n                <Button disabled={isLoading} loading={isLoading} fluid={true} style={{ backgroundColor: \"#4a154b\", color: \"white\", fontSize: \"120%\" }}>Continue</Button>\r\n            </Form>\r\n            {errorState.length > 0 && <Message error>\r\n                <h3>Errors</h3>\r\n                {formaterrors()}\r\n            </Message>\r\n            }\r\n            {isSuccess && <Message success>\r\n                <h3>Successfully Registered</h3>\r\n            </Message>\r\n            }\r\n            <Message>\r\n                Already an User? <Link to=\"/login\" >Login </Link>\r\n            </Message>\r\n        </Grid.Column>\r\n    </Grid>)\r\n}\r\n\r\nexport default Register\r\n\r\n","import React, { useCallback, useState } from 'react';\r\nimport { Grid, Form, Segment, Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport firebase from '../base/firebase';\r\n\r\nconst ForgotPassword = ({ history }) => {\r\n\r\n    let user = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    let errors = [];\r\n    let succ = [];\r\n\r\n\r\n    const [userState, setuserState] = useState(user);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorState, seterrorState] = useState(errors);\r\n    const [succState, setsuccState] = useState(succ);\r\n\r\n\r\n    const handleInput = (event) => {\r\n        let target = event.target;\r\n        setuserState((currentState) => {\r\n            let currentuser = { ...currentState };\r\n            currentuser[target.name] = target.value;\r\n            return currentuser;\r\n        })\r\n    }\r\n\r\n    const formaterrors = () => {\r\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\r\n    }\r\n\r\n    const formatsuccess = () => {\r\n        return succState.map((succ, index) => <p key={index}>{succ}</p>)\r\n    }\r\n    const handleForgotPassword = useCallback(\r\n        async event => {\r\n            event.preventDefault();\r\n            const { email } = event.target.elements;\r\n            try {\r\n                await firebase\r\n                    .auth()\r\n                    .sendPasswordResetEmail(email.value);\r\n                setIsLoading(false);\r\n                setsuccState((message) => message.concat(\"We have just sent you an email to change your password!\"));\r\n                // history.push(\"/\");\r\n            } catch (serverError) {\r\n                setIsLoading(false);\r\n                seterrorState((error) => error.concat(serverError));\r\n            }\r\n        },\r\n        // [history]\r\n    );\r\n\r\n\r\n    return <Grid verticalAlign=\"top\" textAlign=\"center\" className=\"grid-form\" >\r\n        <Grid.Column style={{ maxWidth: '500px' }}>\r\n            <img src=\"Screen-Shot-2019-01-17-at-2.29.34-PM.png\" alt=\"logo\"style={{ marginTop: \"50px\", width: \"40%\" }}></img>\r\n            <p className=\"p-refreshed_page__heading\">Forgot Passowrd</p>\r\n            <p className=\"p-refreshed_page__sub_heading\">What email address are you using on Slack ?</p>\r\n            <Form onSubmit={handleForgotPassword}>\r\n                <Segment stacked>\r\n                    <Form.Input\r\n                        name=\"email\"\r\n                        value={userState.email}\r\n                        icon=\"mail\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"email\"\r\n                        placeholder=\"User Email\"\r\n                    />\r\n                </Segment>\r\n                <Button disabled={isLoading} loading={isLoading} fluid={true} style={{ backgroundColor: \"#4a154b\", color: \"white\", fontSize: \"120%\" }}>Reset My Password</Button>\r\n            </Form>\r\n            {errorState.length > 0 && <Message error>\r\n                <h3>Errors</h3>\r\n                {formaterrors()}\r\n            </Message>\r\n            }\r\n\r\n            {succState.length > 0 && <Message success>\r\n                <h3>Success</h3>\r\n                {formatsuccess()}\r\n            </Message>\r\n            }\r\n\r\n            <Message>\r\n                Not an User? <Link to=\"/register\" >Register </Link>\r\n            </Message>\r\n            <Message>\r\n                Already an User?  <Link to=\"/login\">Login </Link>\r\n            </Message>\r\n        </Grid.Column>\r\n    </Grid>\r\n}\r\n\r\nexport default ForgotPassword;","import React, { useState } from 'react';\r\nimport { Grid, Form, Segment,  Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport firebase from '../base/firebase';\r\n\r\nconst Login = () => {\r\n    let user = {\r\n        name:'',\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    let errors = [];\r\n\r\n    const [userState, setuserState] = useState(user);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorState, seterrorState] = useState(errors);\r\n\r\n    // var provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    const handleInput = (event) => {\r\n        let target = event.target;\r\n        setuserState((currentState) => {\r\n            let currentuser = { ...currentState };\r\n            currentuser[target.name] = target.value;\r\n            return currentuser;\r\n        })\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (isFormEmpty()) {\r\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const isFormEmpty = () => {\r\n        return !userState.password.length ||\r\n            !userState.email.length;\r\n    }\r\n\r\n    const formaterrors = () => {\r\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        seterrorState(() => []);\r\n        if (checkForm()) {\r\n            setIsLoading(true);\r\n            firebase.auth()\r\n                .signInWithEmailAndPassword(userState.email, userState.password)\r\n                .then(user => {\r\n                    setIsLoading(false);\r\n                    console.log(user);\r\n                })\r\n                .catch(serverError => {\r\n                    setIsLoading(false);\r\n                    seterrorState((error) => error.concat(serverError));\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    // const googleUser = () => {\r\n    //     firebase.auth().signInWithPopup(provider).then(function (result) {\r\n    //         // This gives you a Google Access Token. You can use it to access the Google API.\r\n    //         var token = result.credential.accessToken;\r\n    //         // The signed-in user info.\r\n    //         var user = result.user;\r\n    //         firebase.auth()\r\n    //         .createUserWithEmailAndPassword(userState.email, userState.password)\r\n    //         .then(createdUser => {\r\n    //             createdUser.user\r\n    //             .updateProfile({\r\n    //                 displayName: user.displayName,\r\n    //             })\r\n    //             console.log(createdUser);\r\n    //         })\r\n\r\n    //         console.log(user.displayName);\r\n    //             try {\r\n    //                firebase\r\n    //                 .database().ref(\"users\").push({\r\n    //                     displayName :user.displayName,\r\n    //                     name:user.displayName\r\n    //                 })\r\n                  \r\n    //             } catch (error) {\r\n    //               console.log(error);\r\n    //             }\r\n              \r\n    //         // ...\r\n    //     }).catch(function (error) {\r\n    //         // Handle Errors here.\r\n    //         var errorCode = error.code;\r\n    //         var errorMessage = error.message;\r\n    //         // The email of the user's account used.\r\n    //         var email = error.email;\r\n    //         // The firebase.auth.AuthCredential type that was used.\r\n    //         var credential = error.credential;\r\n    //         // ...\r\n    //     });\r\n    // }\r\n\r\n    return <Grid verticalAlign=\"top\" textAlign=\"center\" className=\"grid-form\" >\r\n        <Grid.Column style={{ maxWidth: '500px' }}>\r\n            <img src=\"Screen-Shot-2019-01-17-at-2.29.34-PM.png\" alt=\"logo\" style={{ marginTop: \"50px\", width: \"40%\" }}></img>\r\n            <p className=\"p-refreshed_page__heading\">Sign in to Slack</p>\r\n            <p className=\"p-refreshed_page__sub_heading\">Continue with the Google account or email address you use to sign in.</p>\r\n            {/* <Button color=\"primary\" basic fluid={true} style={{marginBottom:\"30px\",fontSize:\"80%\"}} onClick={googleUser}> */}\r\n            {/* <img src=\"Capture.PNG\" style={{width:\"80%\"}}></img>\r\n            </Button> */}\r\n            {/* <div className=\"c-horizontal_content_rule margin_bottom_150\"><hr class=\"c-horizontal_content_rule__leftrule\"/>\r\n            <div className=\"c-horizontal_content_rule__content\"><strong class=\"sk_light_gray_always\">OR</strong></div>\r\n            <hr className=\"c-horizontal_content_rule__rightrule\"/></div> */}\r\n            <Form onSubmit={onSubmit}>\r\n                <Segment stacked>\r\n                    <Form.Input\r\n                        name=\"email\"\r\n                        value={userState.email}\r\n                        icon=\"mail\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"email\"\r\n                        placeholder=\"User Email\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"password\"\r\n                        value={userState.password}\r\n                        icon=\"lock\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"password\"\r\n                        placeholder=\"User Password\"\r\n                    />\r\n                </Segment>\r\n                <Button disabled={isLoading} loading={isLoading} fluid={true} style={{backgroundColor:\"#4a154b\", color:\"white\" ,fontSize:\"120%\"}}>Sign In with Email</Button>\r\n            </Form>\r\n            {errorState.length > 0 && <Message error>\r\n                <h3>Errors</h3>\r\n                {formaterrors()}\r\n            </Message>\r\n            }\r\n            <Message>\r\n                Not an User? <Link to=\"/register\">Register </Link>\r\n            </Message>\r\n            <Message>\r\n                Forgot Password? <Link to=\"/forgotPassword\">Forgot Password </Link>\r\n            </Message>\r\n        </Grid.Column>        \r\n    </Grid>\r\n    \r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport \"./style.css\"\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst AppLoader = (props) => {\r\n    return (<Dimmer active={props.loading}>\r\n        <Loader size=\"huge\" content=\"Loading...\" />\r\n    </Dimmer>)\r\n}\r\n\r\nexport default AppLoader\r\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter as Router, Switch, Route, withRouter } from \"react-router-dom\";\r\nimport { Provider, connect } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport { combinedReducers } from './store/reducer'\r\nimport { setUser } from './store/actioncreator'\r\n\r\nimport Register from './components/Register';\r\nimport ForgotPassword from './components/Forgot_Paaword';\r\nimport Login from './components/Login';\r\nimport firebase from './base/firebase'\r\nimport AppLoader from './components/Loader'\r\n\r\nconst store = createStore(combinedReducers)\r\n\r\nconst Index = (props) => {\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        props.setUser(user)\r\n        props.history.push(\"/\")\r\n      } \r\n      else if(props.location.pathname===\"/forgotpassword\"){\r\n        props.setUser(null)\r\n        props.history.push(\"/forgotpassword\")\r\n      }\r\n      else {\r\n        props.setUser(null)\r\n        props.history.push(\"/login\")\r\n      }\r\n    })\r\n  },[]);\r\n\r\n\r\n  return (\r\n    <>\r\n    <AppLoader loading={props.loading && props.location.pathname===\"/\"} />\r\n     <Switch>\r\n      <Route path=\"/forgotpassword\" component={ForgotPassword}></Route>\r\n      <Route path=\"/login\" component={Login}></Route>\r\n      <Route path=\"/register\" component={Register}></Route>\r\n      <Route path=\"/\" component={App}></Route>\r\n    </Switch>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.user.currentUser,\r\n    loading: state.channel.loading\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => { dispatch(setUser(user)) }\r\n  }\r\n}\r\n\r\n\r\nconst IndexWithRouter = withRouter(connect(mapStateToProps, mapDispatchToProps)(Index))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <IndexWithRouter />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}