{"version":3,"sources":["base/firebase.js","store/actiontypes.js","store/actioncreator.js","components/UserInfo.js","components/Notification.js","components/Channels.js","components/Chat.js","components/FavChannel.js","components/Sidebar.js","components/Message/MessageHeader.js","components/Message/MessageContent.js","components/ImageUpload.js","components/Message/MessageInput.js","components/Message/Message.js","components/Message/DetailsBar.js","App.js","reportWebVitals.js","store/reducer.js","components/Register.js","components/Forgot_Paaword.js","components/Login.js","components/Loader.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","SET_USER","SET_CHANNEL","SET_FAVOURITECHANNEL","REMOVE_FAVOURITECHANNEL","MESSAGE","MESSAGE_FILE","setUser","user","type","payload","currentUser","setChannel","channel","currentChannel","connect","state","dispatch","photoURL","props","signOut","auth","then","console","log","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","avatar","displayName","options","key","text","disabled","onClick","Notification","messagesRef","database","ref","usersRef","useState","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","useEffect","child","uid","on","snap","val","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","reduce","item","push","timestamp","id","lastVisited","channelMessagesTimeStamp","notificationCount","filter","length","Label","color","calculateNotificationCount","notificationChannelId","selectChannel","ModelOpenState","setModelOpenState","Name","Desc","channelAddState","setchannelAddState","isLoading","setisLoading","channelState","setchannelState","channelsRef","UserRef","currentState","updatedState","off","closeModel","setLatVisited","LatVisited","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","desc","created_by","update","catch","err","handleInput","e","target","value","Menu","style","marginTop","Item","fontSize","marginLeft","map","active","isFav","displayChannels","Modal","open","onClose","Form","Segment","stacked","Input","onChange","placeholder","Actions","Button","loading","UserState","setUserState","ConnectedUserState","setConnectedUserState","connectedRef","statusRef","isPrivatechat","userStatusRef","remove","index","indexOf","splice","selectUser","userTemp","generateId","userId","displayUsers","favouriteChannels","favouriteChannel","SideBar","vertical","fixed","borderless","size","Channels","MessageHeader","clearing","floated","fluid","channelName","starChange","starred","Subheader","uniqueUser","channelDesc","icon","searchChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","contentType","onLoad","imgLoaded","image","width","Card","Description","href","data-toggle","data-placement","title","fileName","Meta","fileSize","Text","content","ImageUpload","fileState","setfileState","acceptedTypes","basic","file","files","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setmessageState","fileDialogState","setfileDialogState","emojiState","setemojiState","downloadUrl","createMessageInfo","handleKeypress","onKeyPress","paddingRight","paddingBottom","labelPosition","position","bottom","right","onSelect","emoji","native","addEmoji","emojiSize","a","split","filePath","uuidv4","filePath2","filePath3","filePath4","filePath5","filePath6","filePath7","filePath8","put","data","getDownloadURL","url","class","messagefile","messageFile","setfavouriteChannel","removefavouriteChannel","SetMessage","SetMessageFile","searchState","setsearchState","divRef","useRef","updatesState","scrollIntoView","behavior","filterBySearch","regex","RegExp","acc","match","isStared","uniqueUsers","uniqueUserCount","FavRef","Group","messageToDisplay","displayMessage","currentEle","Message","activeIndex","setactiveIndex","handleClick","titleProps","header","extra","Accordion","Title","paddingLeft","userName","circular","App","columns","paddingTop","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultUserState","defaultMessageFileState","fileNameState","defaultChannelState","defaultFavouriteChannelState","combinedReducers","combineReducers","action","Register","userCollectionRef","email","password","confirmpassword","userState","setuserState","errorState","seterrorState","setIsLoading","isSuccess","setIsSuccess","event","currentuser","isFormEmpty","checkPassword","error","concat","updateuserDetails","createdUser","updateProfile","saveUserInDB","serverError","verticalAlign","textAlign","maxWidth","alt","createUserWithEmailAndPassword","iconPosition","backgroundColor","success","to","ForgotPassword","history","succState","setsuccState","handleForgotPassword","useCallback","preventDefault","elements","sendPasswordResetEmail","succ","Login","signInWithEmailAndPassword","AppLoader","Dimmer","Loader","store","createStore","IndexWithRouter","withRouter","onAuthStateChanged","location","pathname","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddada333.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nimport 'firebase/auth'\r\nimport 'firebase/storage'\r\nimport 'firebase/database'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDMMppYBvwaeI0US-aMle9r979XqjXzToc\",\r\n    authDomain: \"react-slack-e5339.firebaseapp.com\",\r\n    databaseURL: \"https://react-slack-e5339.firebaseio.com\",\r\n    projectId: \"react-slack-e5339\",\r\n    storageBucket: \"react-slack-e5339.appspot.com\",\r\n    messagingSenderId: \"891002544306\",\r\n    appId: \"1:891002544306:web:ea5b6ba6ac845df2b829ab\",\r\n    measurementId: \"G-GFTYJ8XR1D\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig)\r\n  firebase.analytics();\r\n\r\n  export default firebase\r\n\r\n","\r\nexport const SET_USER = 'SET_USER'\r\n\r\nexport const SET_CHANNEL = 'SET_CHANNEL'\r\n\r\nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL'\r\n\r\nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL'\r\n\r\nexport const MESSAGE = 'MESSAGE'\r\n\r\nexport const MESSAGE_FILE = 'MESSAGE_FILE'\r\n\r\n","import { SET_USER, SET_CHANNEL ,SET_FAVOURITECHANNEL,REMOVE_FAVOURITECHANNEL,MESSAGE,MESSAGE_FILE} from './actiontypes';\r\n\r\nexport const setUser = (user) => {\r\n    return {\r\n        type: SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    }\r\n}\r\n\r\nexport const setChannel = (channel) => {\r\n    return {\r\n        type: SET_CHANNEL,\r\n        payload: {\r\n            currentChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setfavouriteChannel = (channel) => {\r\n    return {\r\n        type: SET_FAVOURITECHANNEL,\r\n        payload: {\r\n            favouriteChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const removefavouriteChannel = (channel) => {\r\n    return {\r\n        type: REMOVE_FAVOURITECHANNEL,\r\n        payload: {\r\n            favouriteChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const SetMessage = (message) => {\r\n    return {\r\n        type: MESSAGE,\r\n        payload: {\r\n            message: message\r\n        }\r\n    }\r\n}\r\n\r\nexport const SetMessageFile = (messagefile) => {\r\n    return {\r\n        type: MESSAGE_FILE,\r\n        payload: {\r\n            messagefile: messagefile\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Grid, Header, Icon, Image, Dropdown } from 'semantic-ui-react';\r\nimport { connect } from \"react-redux\";\r\nimport firebase from '../base/firebase';\r\n// import uuidv4 from 'uuid/dist/v4'\r\n\r\nimport { setUser } from '../store/actioncreator'\r\nimport \"./style.css\";\r\n\r\nconst UserInfo = (props) => {\r\n    // let userCollectionRef = firebase.database().ref('users');\r\n    // const storageRef = firebase.storage().ref();\r\n    // const [a,seta]=useState()\r\n    const signOut = () => {\r\n        firebase.auth()\r\n            .signOut()\r\n            .then(() => console.log(\"user signed out\"));\r\n    }\r\n\r\n    // const handleImg=(e)=>{\r\n    //     const filePath=`chat/Profile/${uuidv4()}.jpg`;\r\n    //     const img=e.target.files[0]\r\n        \r\n    //     storageRef.child(filePath).put(img).then(\r\n    //         (data) => {\r\n    //             data.ref.getDownloadURL().then((url) => {\r\n    //                 userCollectionRef.child(props.user?.uid).update({\r\n    //                     photoURL: url\r\n    //                 }).then(() => {\r\n    //                     userCollectionRef.child(props.user?.uid).once('value',(snap)=>{\r\n    //                         seta(snap.val().photoURL)\r\n    //                         console.log(a);\r\n    //                     })\r\n    //                 }).catch((err) => {\r\n    //                     console.log(err);\r\n    //                 })\r\n    //             })\r\n    //         }\r\n    //     ).catch((err) => {\r\n    //         console.log(err);\r\n    //     })\r\n    // }\r\n\r\n    // const handlefileImg=()=>{\r\n    //     const fileinput=document.getElementById('file')\r\n    //     fileinput.click()\r\n    // }\r\n\r\n    const getDropDownOptions = () => {\r\n        return [\r\n            {\r\n                key: \"user\",\r\n                text: <span>Signed in as <strong>{props.user.displayName}</strong></span>,\r\n                disabled: true\r\n            },\r\n            // {\r\n            //     key: \"avatar\",\r\n            //     text: <span><Icon name=\"edit\" onClick={handlefileImg}>Change Avatar\r\n                \r\n            //     <input type=\"file\" name=\"file\" id=\"file\" onChange={handleImg} hidden=\"hidden\"></input>\r\n                \r\n            //     </Icon></span>\r\n            // },\r\n            {\r\n                key: \"signout\",\r\n                text: <Icon name=\"sign-out\"><span onClick={signOut} >  Sign Out</span></Icon>\r\n            }\r\n        ]\r\n    }\r\n\r\n    if (props.user) {\r\n        return (<Grid>\r\n            <Grid.Column>\r\n                <Grid.Row className=\"userinfo_grid_row\">\r\n                    <Header inverted as=\"h2\">\r\n                        <Icon name=\"slack\" />\r\n                        <Header.Content>Slack</Header.Content>\r\n                    </Header>\r\n                    <Header className=\"userinfo_displayname\" inverted as=\"h4\">\r\n                        <Dropdown\r\n                            trigger={\r\n                                <span>\r\n                                    <Image  src={props.user.photoURL} avatar></Image>\r\n                                    {props.user.displayName}\r\n                                </span>\r\n                            }\r\n                            options={getDropDownOptions()}\r\n                        >\r\n                        </Dropdown>\r\n                    </Header>\r\n                </Grid.Row>\r\n            </Grid.Column>\r\n        </Grid>)\r\n    }\r\n    return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      setUser: (user) => { dispatch(setUser(user.photoURL)) }\r\n    }\r\n  }\r\nexport default connect(mapStateToProps,mapDispatchToProps)(UserInfo);","import React, { useState, useEffect } from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport firebase from \"../base/firebase\";\r\n\r\nconst Notification = (props) => {\r\n\r\n    const messagesRef = firebase.database().ref(\"messages\");\r\n    const usersRef = firebase.database().ref(\"users\");\r\n    const [channelsVisitedState, setChannelsVisitedState] = useState({});\r\n    const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (props.user) {\r\n            usersRef.child(props.user?.uid).child('lastvisited').on('value', snap => {\r\n                setChannelsVisitedState(snap.val());\r\n            })\r\n            messagesRef.on('value', snap => {\r\n                let messages = snap.val();\r\n                console.log(messages[-1]);\r\n                let channelsId = Object?.keys(messages);\r\n                let messagesTimeStamp = {};\r\n                channelsId.forEach((channelId) => {\r\n                    let channelMessageKeys = Object.keys(messages[channelId]);\r\n                    channelMessageKeys.reduce((item) => {\r\n                        messagesTimeStamp[channelId] = [...messagesTimeStamp[channelId] || []];\r\n                        messagesTimeStamp[channelId].push(messages[channelId][item]?.timestamp);\r\n                    })\r\n                })\r\n                setMessagesTimeStampState(messagesTimeStamp);\r\n            })\r\n        }\r\n    }, [props.user]);\r\n\r\n    const calculateNotificationCount = (channelId) => {\r\n        \r\n        if (channelsVisitedState && messagesTimeStampState && props.channel && props.channel.id !== channelId) {\r\n            let lastVisited = channelsVisitedState[channelId];\r\n            let channelMessagesTimeStamp = messagesTimeStampState[channelId];\r\n            if (channelMessagesTimeStamp) {\r\n                let notificationCount = channelMessagesTimeStamp.filter(timestamp => !lastVisited || lastVisited < timestamp).length;\r\n                return notificationCount === 0 ? null : <Label color=\"red\">{notificationCount}</Label>\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return <div> {props.displayName} {calculateNotificationCount(props.notificationChannelId)}  </div>;\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Menu, Icon, Modal } from 'semantic-ui-react'\r\nimport { Form, Segment, Button } from 'semantic-ui-react'\r\nimport firebase from '../base/firebase'\r\nimport { setChannel } from '../store/actioncreator'\r\nimport Notification from './Notification'\r\n\r\nimport './style.css'\r\n\r\nconst Channel = (props) => {\r\n\r\n    const [ModelOpenState, setModelOpenState] = useState(false)\r\n    const [channelAddState, setchannelAddState] = useState({ Name: '', Desc: '' })\r\n    const [isLoading, setisLoading] = useState(false)\r\n    const [channelState, setchannelState] = useState([])\r\n    const channelsRef = firebase.database().ref(\"channels\")\r\n    const UserRef = firebase.database().ref(\"users\")\r\n\r\n\r\n    useEffect(() => {\r\n        channelsRef.on('child_added', (snap) => {\r\n            setchannelState((currentState) => {\r\n                let updatedState = [...currentState]\r\n                updatedState.push(snap.val())\r\n                return updatedState\r\n            })\r\n        })\r\n        return()=>channelsRef.off();\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        if(channelState.length>0){\r\n            props.selectChannel(channelState[0])\r\n        }\r\n    },[!props.channel ? channelState:null])\r\n\r\n\r\n    const openModel = () => {\r\n        setModelOpenState(true)\r\n    }\r\n\r\n\r\n    const closeModel = () => {\r\n        setModelOpenState(false)\r\n    }\r\n\r\n    const checkFormValid = () => {\r\n        return channelAddState && channelAddState.Name && channelAddState.Desc\r\n    }\r\n\r\n    const displayChannels = () => {\r\n        if (channelState.length > 0) {\r\n            return channelState.map((channel) => {\r\n                return <Menu.Item\r\n                    key={channel.id}\r\n                    name={channel.name}\r\n                    onClick={()=>{selectChannel(channel)}}\r\n                    active={props.channel && channel.id===props.channel.id && !props.channel.isFav}\r\n                >\r\n                    <Notification user={props.user} channel={props.channel} notificationChannelId={channel.id}\r\n                    displayName={'# '+ channel.name}\r\n                    />\r\n                </Menu.Item>\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectChannel=(channel)=>{\r\n        setLatVisited(props.user,props.channel)\r\n        setLatVisited(props.user,channel)\r\n        props.selectChannel(channel)\r\n    }\r\n\r\n    const setLatVisited=(user,channel)=>{\r\n        const LatVisited=UserRef.child(user.uid).child(\"lastvisited\").child(channel.id);\r\n        LatVisited.set(firebase.database.ServerValue.TIMESTAMP)\r\n        LatVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP)\r\n    }\r\n\r\n\r\n    const onSubmit = () => {\r\n        if (!checkFormValid()) {\r\n            return\r\n        }\r\n        const key = channelsRef.push().key;\r\n        const channel = {\r\n            id: key,\r\n            name: channelAddState.Name,\r\n            desc: channelAddState.Desc,\r\n            created_by: {\r\n                name: props.user.displayName,\r\n                avatar: props.user.photoURL\r\n            }\r\n        }\r\n        setisLoading(true)\r\n        channelsRef.child(key).update(channel).then(() => {\r\n            setchannelAddState({ Name: \"\", Desc: \"\" })\r\n            setisLoading(false)\r\n            closeModel()\r\n            console.log(\"saved\");\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n    const handleInput = (e) => {\r\n        let target = e.target;\r\n        setchannelAddState((currentState) => {\r\n            let updatedState = { ...currentState };\r\n            updatedState[target.name] = target.value;\r\n            return updatedState;\r\n        })\r\n    }\r\n\r\n    return <><Menu.Menu style={{marginTop:\"35px\"}}>\r\n        <Menu.Item style={{fontSize:\"17px\"}}>\r\n            <span>\r\n                <Icon name=\"exchange\"></Icon>Channels\r\n            </span>\r\n            ({channelState.length})\r\n            <span style={{marginLeft:\"20px\"}} onClick={openModel}>\r\n                <Icon name=\"add circle\">\r\n                </Icon>\r\n            </span>\r\n        \r\n        </Menu.Item>\r\n        {displayChannels()}\r\n\r\n    </Menu.Menu>\r\n        <Modal open={ModelOpenState} onClose={closeModel}>\r\n            <Modal.Header>\r\n                Create Channel\r\n        </Modal.Header>\r\n\r\n            <Modal.Content>\r\n                <Form onSubmit={onSubmit}>\r\n                    <Segment stacked>\r\n                        <Form.Input\r\n                            name=\"Name\"\r\n                            value={channelAddState.Name}\r\n                            onChange={handleInput}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Channel Name\"\r\n                        />\r\n                        <Form.Input\r\n                            name=\"Desc\"\r\n                            value={channelAddState.Desc}\r\n                            onChange={handleInput}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Channel Description\"\r\n                        />\r\n                    </Segment>\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button loading={isLoading} onClick={onSubmit}>\r\n                    <Icon name=\"checkmark\" /> Save\r\n                </Button>\r\n                <Button onClick={closeModel}>\r\n                    <Icon name=\"remove\" /> Cancel\r\n                </Button>\r\n            </Modal.Actions>\r\n\r\n        </Modal>\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        channel:state.channel.currentChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectChannel:(channel)=>dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Channel)\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\nimport firebase from '../base/firebase'\r\nimport { setChannel } from '../store/actioncreator'\r\nimport Notification from './Notification'\r\n\r\n\r\nconst Chat = (props) => {\r\n    const [UserState, setUserState] = useState([])\r\n    const [ConnectedUserState, setConnectedUserState] = useState([])\r\n    const UserRef = firebase.database().ref(\"users\")\r\n    const connectedRef =firebase.database().ref(\".info/connected\")\r\n    const statusRef=firebase.database().ref(\"status\")\r\n\r\n    useEffect(() => {\r\n        UserRef.on('child_added', (snap) => {\r\n            setUserState((currentState) => {\r\n                let updatedState = [...currentState]\r\n                let user=snap.val();\r\n                user.name=user.displayName\r\n                user.id=snap.key\r\n                user.isPrivatechat=true\r\n                updatedState.push(user)\r\n                return updatedState\r\n            })\r\n        })\r\n        connectedRef.on(\"value\",snap=>{\r\n            if(props.user && snap.val()){\r\n                const userStatusRef=statusRef.child(props.user.uid)\r\n                userStatusRef.set(true)\r\n                userStatusRef.onDisconnect().remove()\r\n            }\r\n        })\r\n\r\n        return()=>{UserRef.off(); connectedRef.off()}\r\n    }, [props.user])\r\n\r\n    useEffect(()=>{\r\n        statusRef.on(\"child_added\",snap=>{\r\n            setConnectedUserState((currentState)=>{\r\n                let updatedState=[...currentState]\r\n                updatedState.push(snap.key)\r\n                return updatedState\r\n            })\r\n        })\r\n\r\n        statusRef.on(\"child_removed\",snap=>{\r\n            setConnectedUserState((currentState)=>{\r\n                let updatedState=[...currentState]\r\n                let index=updatedState.indexOf(snap.key)\r\n                updatedState.splice(index,1)\r\n                return updatedState\r\n            })\r\n        })\r\n        return()=>statusRef.off()\r\n\r\n    },[UserState])\r\n\r\n\r\n\r\n    const displayUsers = () => {\r\n        if (UserState.length > 0) {\r\n            return UserState.filter((user) => user.id!==props.user?.uid).map((user)=>{\r\n                return <Menu.Item\r\n                    key={user.id}\r\n                    name={user.name}\r\n                    onClick={()=>{selectUser(user)}}\r\n                    active={props.channel && generateId(user.id)===props.channel.id}\r\n                >\r\n                    <Icon name=\"circle\" color={`${ConnectedUserState.indexOf(user.id)!==-1 ? \"green\":\"red\"}`}></Icon>\r\n                    <Notification user={props.user} channel={props.channel} notificationChannelId={generateId(user.id)}\r\n                    displayName={'@ '+user.name}\r\n                    />\r\n                </Menu.Item>\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectUser=(user)=>{\r\n        let userTemp={\r\n            ...user\r\n        }\r\n        userTemp.id=generateId(user.id)\r\n        setLatVisited(props.user,props.channel)\r\n        setLatVisited(props.user,userTemp)\r\n        props.selectChannel(userTemp)\r\n\r\n    }\r\n\r\n    const setLatVisited=(user,channel)=>{\r\n        const LatVisited=UserRef.child(user?.uid).child(\"lastvisited\").child(channel.id);\r\n        LatVisited.set(firebase.database.ServerValue.TIMESTAMP)\r\n        LatVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP)\r\n    }\r\n\r\n    const generateId=(userId)=>{\r\n        if(props.user?.uid < userId){\r\n            return props.user?.uid + userId\r\n        }\r\n            else{\r\n                return userId+props.user?.uid\r\n            }\r\n        \r\n    }\r\n\r\n    return <Menu.Menu style={{marginTop:\"35px\"}}>\r\n        <Menu.Item style={{fontSize:\"17px\"}}>\r\n            <span>\r\n                <Icon name=\"mail\"></Icon>Direct Messages\r\n            </span>\r\n        ({UserState.length -1})\r\n        </Menu.Item>\r\n        {displayUsers()}\r\n    </Menu.Menu>\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        channel:state.channel.currentChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectChannel:(channel)=>dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Chat)\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\nimport { setChannel } from '../store/actioncreator'\r\n\r\n\r\nconst FavChannels = (props) => {\r\n    const displayChannels = () => {\r\n        if (Object.keys(props.favouriteChannels).length > 0) {\r\n            return Object.keys(props.favouriteChannels).map((channelId)=>{\r\n                return <Menu.Item\r\n                    key={channelId}\r\n                    name={props.favouriteChannels[channelId]}\r\n                    onClick={()=>{props.selectChannel({id:channelId,name:props.favouriteChannels[channelId],isFav:true})}}\r\n                    active={props.channel && channelId===props.channel.id && props.channel.isFav}\r\n                >\r\n                    {'# '+props.favouriteChannels[channelId]}\r\n                </Menu.Item>\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return <Menu.Menu>\r\n        <Menu.Item style={{fontSize:\"17px\"}}>\r\n            <span>\r\n                <Icon name=\"star\"></Icon>Starred\r\n            </span>\r\n        ({Object.keys(props.favouriteChannels).length })\r\n        </Menu.Item>\r\n        {displayChannels()}\r\n    </Menu.Menu>\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel:state.channel.currentChannel,\r\n        favouriteChannels:state.favouriteChannel.favouriteChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectChannel:(channel)=>dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(FavChannels)\r\n\r\n","import React from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport UserInfo from \"./UserInfo\";\r\nimport Channels from \"./Channels\";\r\nimport PrivateChat from \"./Chat\";\r\nimport FavouriteChannels from \"./FavChannel\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const SideBar = () => {\r\n    return (<Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\r\n        <UserInfo />\r\n        <FavouriteChannels />\r\n        <Channels />\r\n        <PrivateChat />\r\n    </Menu>\r\n    )\r\n}","import React,{useState} from 'react';\r\nimport { Segment, Header, Input, Icon } from 'semantic-ui-react';\r\n\r\nconst MessageHeader = (props) => {\r\n\r\n\r\n    return <Segment clearing>\r\n        <Header floated=\"left\" fluid=\"true\" as=\"h2\">\r\n            <span>\r\n                {(props.isPrivatechat ?\"@ \": \"# \")+ props.channelName}\r\n                {!props.isPrivatechat &&  <Icon onClick={props.starChange} \r\n                name={props.starred ? \"star\" :\"star outline\"}\r\n                color={props.starred ? \"yellow\" :\"black\"}\r\n                ></Icon>}\r\n            </span>\r\n        <Header.Subheader>\r\n            {(!props.isPrivatechat ? (<Icon name=\"user outline\"></Icon>):\"\")}{ (!props.isPrivatechat ? props.uniqueUser +\" | \" +  props.channelDesc :\"\")}\r\n        \r\n        </Header.Subheader> \r\n        </Header>\r\n        <Header floated=\"right\">\r\n            <Input\r\n                name=\"search\"\r\n                icon=\"search\"\r\n                placeholder=\"Search Messages\"\r\n                size=\"mini\"\r\n                onChange={props.searchChange}\r\n            />\r\n        </Header>\r\n    </Segment>\r\n}\r\n\r\nexport default MessageHeader;","import React from 'react';\r\nimport { Comment, Image, Icon, Card } from 'semantic-ui-react'\r\nimport TimeAgo from 'javascript-time-ago'\r\nimport en from 'javascript-time-ago/locale/en'\r\nimport '../style.css'\r\n\r\nTimeAgo.locale(en)\r\nconst timeAgo = new TimeAgo();\r\n\r\nconst MessageContent = (props) => {\r\n    return <Comment>\r\n        <Comment.Avatar src={props.message.user.avatar} />\r\n        <Comment.Content style={{ fontSize: \"15px\" }} className={props.ownMessage ? \"ownMessage\" : null}>\r\n            <Comment.Author>{props.message.user.name}</Comment.Author>\r\n            <Comment.Metadata>{timeAgo.format(props.message.timestamp)}</Comment.Metadata>\r\n            <br></br>\r\n            {\r\n                props.message.contentType === \"image/jpeg\"\r\n                    ?\r\n                    <Image onLoad={props.imgLoaded} src={props.message.image} style={{ width: \"60%\" }}></Image>\r\n                    :\r\n                    props.message.contentType === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || props.message.contentType === \"application/msword\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={props.message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file word'/>{props.message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}>{props.message.fileSize} WORD Document\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        props.message.contentType === \"application/pdf\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={props.message.image} target=\"new\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to view\"><Icon name='file pdf'/>{props.message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}>{props.message.fileSize} PDF Document\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        props.message.contentType === \"application/xml\" || props.message.contentType ===\"text/xml\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={props.message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file excel'/>{props.message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}>{props.message.fileSize} EXCEL Document\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        props.message.contentType === \"application/zip\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={props.message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file archive'/>{props.message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}>{props.message.fileSize} ZIP Document\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        props.message.contentType === \"text/plain\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={props.message.image} target=\"new\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to view\"><Icon name='file'/>{props.message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}>{props.message.fileSize} TXT Document\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        props.message.contentType === \"application/ppt\" || props.message.contentType ===\"application/vnd.openxmlformats-officedocument.presentationml.presentation\" || props.message.contentType ===\"application/vnd.ms-powerpoint\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={props.message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file powerpoint'/>{props.message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}>{props.message.fileSize} PPT Document\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        props.message.contentType === \"text/csv\" \r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={props.message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file excel'/>{props.message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}>{props.message.fileSize} CSV Document\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        <Comment.Text>{props.message.content}</Comment.Text>\r\n            }\r\n        </Comment.Content>\r\n    </Comment>\r\n}\r\n\r\nexport default MessageContent;","import React, { useState } from 'react'\r\nimport {Button, Icon, Input, Modal} from 'semantic-ui-react'\r\nimport mime from 'mime-types'\r\n\r\nconst ImageUpload=(props)=>{\r\n    const [fileState,setfileState]=useState(null)\r\n    const acceptedTypes = [\"image/png\", \"image/jpeg\",\"application/msword\",\"application/xml\",\"text/xml\",\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\"application/pdf\",\"application/zip\",\"text/plain\",\"application/vnd.ms-powerpoint\",\"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\"text/csv\"]\r\n\r\n    const onFileAdded=(e)=>{\r\n        const file=e.target.files[0]\r\n        if(file){\r\n            setfileState(file)\r\n        }\r\n    }\r\n\r\n    const onSubmit=()=>{\r\n        if (fileState && acceptedTypes.includes(mime.lookup(fileState.name))) {\r\n            props.uploadImage(fileState, mime.lookup(fileState.name));\r\n            props.onClose();\r\n            setfileState(null);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Modal basic open={props.open} onClose={props.onClose}>\r\n        <Modal.Header style={{color:\"grey\"}}>Select File of Type ( png , jpeg, jpg, txt, docx, pdf, ppt, xml, zip )</Modal.Header>\r\n        <Modal.Content>\r\n            <Input\r\n            fluid\r\n            type=\"file\"\r\n            name=\"file\"\r\n            onChange={onFileAdded}\r\n            >\r\n            </Input>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n            <Button color=\"green\" onClick={onSubmit}>\r\n                <Icon name=\"checkmark\"></Icon>ADD\r\n            </Button>\r\n            <Button color=\"red\" onClick={props.onClose}>\r\n                <Icon name=\"remove\"></Icon>Cancel\r\n            </Button>\r\n        </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ImageUpload","import React, {  useState } from 'react';\r\nimport { Segment, Input, Button } from 'semantic-ui-react';\r\nimport firebase from '../../base/firebase'\r\nimport { connect } from 'react-redux'\r\nimport ImageUpload from '../ImageUpload'\r\nimport uuidv4 from 'uuid/dist/v4'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\nimport '../style.css'\r\n\r\nconst MessageInput = (props) => {\r\n    const messageRef = firebase.database().ref('messages');\r\n    const storageRef = firebase.storage().ref();\r\n    const [messageState, setmessageState] = useState('');\r\n    const [fileDialogState, setfileDialogState] = useState(false);\r\n    const [emojiState, setemojiState] = useState(false);\r\n\r\n    const createMessageInfo = (downloadUrl,contentType,fileSize,fileName) => {\r\n        return {\r\n            user: {\r\n                avatar: props.user.photoURL,\r\n                name: props.user.displayName,\r\n                id: props.user.uid\r\n            },\r\n            content: messageState,\r\n            contentType:contentType || \"\",\r\n            fileName:fileName || \"\",\r\n            fileSize:fileSize || \"\",\r\n            image: downloadUrl || \"\",\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP\r\n        }\r\n    }\r\n\r\n    const onSubmit = (downloadUrl,contentType,fileSize,fileName) => {\r\n        if (messageState || downloadUrl) {\r\n            messageRef.child(props.channel.id).push().set(createMessageInfo(downloadUrl,contentType,fileSize,fileName)).then(() => {\r\n                setmessageState(\"\")\r\n                console.log(\"sent\");\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        } \r\n\r\n    }\r\n\r\n    const onMessageChange = (e) => {\r\n        const target = e.target;\r\n        setmessageState(target.value)\r\n    }\r\n    const handleKeypress = e => {\r\n        console.log(e.key);\r\n        if (e.key === \"Enter\") {\r\n            return onSubmit();\r\n        }\r\n    };\r\n\r\n    const handleEmojiPicker = () => {\r\n        if (!emojiState) {\r\n            setemojiState(true)\r\n        }\r\n        else {\r\n            setemojiState(false)\r\n        }\r\n    }\r\n\r\n    const addEmoji = (emoji) => {\r\n        setmessageState(messageState + emoji.native)\r\n    }\r\n\r\n    const uploadImage = (file, contentType) => {\r\n        var a=file.name.split('.')[1]\r\n        var fileSize=(file.size/1000)+\" kB\"\r\n        var fileName=file.name\r\n        console.log(file);\r\n\r\n        const filePath = `chat/images/${uuidv4()}.jpg`;\r\n        const filePath2 = `chat/Doc/${uuidv4()}.docx`;\r\n        const filePath3 = `chat/Doc/${uuidv4()}.pdf`;\r\n        const filePath4 = `chat/Doc/${uuidv4()}.xml`;\r\n        const filePath5 = `chat/Doc/${uuidv4()}.zip`;\r\n        const filePath6 = `chat/Doc/${uuidv4()}.txt`;\r\n        const filePath7 = `chat/Doc/${uuidv4()}.ppt`;\r\n        const filePath8 = `chat/Doc/${uuidv4()}.csv`;\r\n\r\n        if(a===\"docx\"){\r\n            storageRef.child(filePath2).put(file, { contentType: contentType }).then(\r\n                (data) => {\r\n                    data.ref.getDownloadURL().then((url) => {\r\n                        onSubmit(url,contentType,fileSize,fileName)\r\n                    })\r\n                }\r\n            ).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        else if(a===\"jpg\" || a===\"png\" || a===\"jpeg\"){\r\n            storageRef.child(filePath).put(file, { contentType: contentType }).then(\r\n                (data) => {\r\n                    data.ref.getDownloadURL().then((url) => {\r\n                        onSubmit(url,contentType,fileSize,fileName)\r\n                    })\r\n                }\r\n            ).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        else if(a===\"pdf\"){\r\n            storageRef.child(filePath3).put(file, { contentType: contentType }).then(\r\n                (data) => {\r\n                    data.ref.getDownloadURL().then((url) => {\r\n                        onSubmit(url,contentType,fileSize,fileName)\r\n                    })\r\n                }\r\n            ).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        else if(a===\"xml\"){\r\n            storageRef.child(filePath4).put(file, { contentType: contentType }).then(\r\n                (data) => {\r\n                    data.ref.getDownloadURL().then((url) => {\r\n                        onSubmit(url,contentType,fileSize,fileName)\r\n                    })\r\n                }\r\n            ).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n        else if(a===\"zip\"){\r\n            storageRef.child(filePath5).put(file, { contentType: contentType }).then(\r\n                (data) => {\r\n                    data.ref.getDownloadURL().then((url) => {\r\n                        onSubmit(url,contentType,fileSize,fileName)\r\n                    })\r\n                }\r\n            ).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        else if(a===\"txt\"){\r\n            storageRef.child(filePath6).put(file, { contentType: contentType }).then(\r\n                (data) => {\r\n                    data.ref.getDownloadURL().then((url) => {\r\n                        onSubmit(url,contentType,fileSize,fileName)\r\n                    })\r\n                }\r\n            ).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        else if(a===\"ppt\" || a===\"pptx\"){\r\n        console.log(a);\r\n            storageRef.child(filePath7).put(file, { contentType: contentType }).then(\r\n                (data) => {\r\n                    data.ref.getDownloadURL().then((url) => {\r\n                        onSubmit(url,contentType,fileSize,fileName)\r\n                    })\r\n                }\r\n            ).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n        else if(a===\"csv\"){\r\n            console.log(a);\r\n                storageRef.child(filePath8).put(file, { contentType: contentType }).then(\r\n                    (data) => {\r\n                        data.ref.getDownloadURL().then((url) => {\r\n                            onSubmit(url,contentType,fileSize,fileName)\r\n                        })\r\n                    }\r\n                ).catch((err) => {\r\n                    console.log(err);\r\n                })\r\n            }\r\n    }\r\n\r\n    return <Segment >\r\n        <Input \r\n            onChange={onMessageChange}\r\n            onKeyPress={handleKeypress}\r\n            name=\"message\"\r\n            style={{width:\"94%\",paddingRight:\"5px\",paddingBottom:\"10px\"}}\r\n            value={messageState}\r\n            placeholder=\"Write Your Message\"\r\n            labelPosition=\"right\"\r\n        ></Input>\r\n        <Button icon=\"smile outline\" onClick={handleEmojiPicker} size=\"medium\"/>\r\n        {emojiState ? (\r\n            <Picker style={{ position: 'absolute', bottom: '100px', right: '20px' }} onKeyPress={handleKeypress} onSelect={(emoji) => { addEmoji(emoji) }} emojiSize={20} />) : null}\r\n        <ImageUpload uploadImage={uploadImage} open={fileDialogState} onClose={() => setfileDialogState(false)} />\r\n        <div class=\"ui icon two buttons\" >\r\n        <Button icon=\"send\" content=\"Add Reply\" color=\"orange\" onClick={() => { onSubmit() }} />\r\n        <Button icon=\"upload\" content=\"Upload Media\" color=\"blue\" onClick={() => setfileDialogState(true)} />\r\n            </div>\r\n    </Segment>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        channel: state.channel.currentChannel\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MessageInput);\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Segment, Comment } from 'semantic-ui-react';\r\nimport MessageHeader from '../Message/MessageHeader'\r\nimport MessageContent from '../Message/MessageContent'\r\nimport MessageInput from '../Message/MessageInput'\r\nimport firebase from '../../base/firebase'\r\nimport { connect } from 'react-redux'\r\nimport { setfavouriteChannel, removefavouriteChannel,SetMessage,SetMessageFile } from '../../store/actioncreator'\r\nimport '../style.css'\r\n\r\n\r\nconst Message = (props) => {\r\n    const messageRef = firebase.database().ref('messages')\r\n    const usersRef = firebase.database().ref('users')\r\n    const [messageState, setmessageState] = useState([]);\r\n    const [searchState, setsearchState] = useState(\"\");\r\n\r\n    let divRef = useRef()\r\n    useEffect(() => {\r\n        if (props.channel) {\r\n            setmessageState([]);\r\n            messageRef.child(props.channel.id).on('child_added', (snap) => {\r\n                setmessageState((currentState) => {\r\n                    let updatesState = [...currentState];\r\n                    updatesState.push(snap.val())\r\n                    return updatesState\r\n                })\r\n            })\r\n\r\n            return () => messageRef.child(props.channel.id).off()\r\n        }\r\n    }, [props.channel])\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.user) {\r\n            usersRef.child(props.user.uid).child('favourite').on('child_added', (snap) => {\r\n                props.setfavouriteChannel(snap.val())\r\n            })\r\n            usersRef.child(props.user.uid).child('favourite').on(\"child_removed\", (snap) => {\r\n                props.removefavouriteChannel(snap.val())\r\n            })\r\n            return () => usersRef.child(props.user.uid).child('favourite').off()\r\n        }        \r\n    }, [props.channel])\r\n\r\n\r\n    useEffect(() => {\r\n        divRef.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messageState])\r\n\r\n\r\n    const imgLoaded = () => {\r\n        divRef.scrollIntoView({ behavior: 'smooth' });\r\n\r\n    }\r\n\r\n    const displayMessage = () => {\r\n        let messageToDisplay = searchState ? filterBySearch() : messageState;\r\n        if (messageToDisplay.length > 0) {\r\n            return messageToDisplay.map((message) => {\r\n                return <div><MessageContent key={message.timestamp} messageToDisplay={messageToDisplay} message={message} ownMessage={message.user?.id === props.user?.uid} imgLoaded={imgLoaded}>\r\n                </MessageContent>\r\n                </div>\r\n            })\r\n        }\r\n    }\r\n    const uniqueUserCount = () => {\r\n        const uniqueUsers = messageState.reduce((acc, message) => {\r\n            if (!acc.includes(message.user.name)) {\r\n                acc.push(message.user.name);\r\n            }\r\n            return acc\r\n        }, [])\r\n        props.SetMessage(uniqueUsers)\r\n        props.SetMessageFile(messageState)\r\n\r\n        return uniqueUsers.length\r\n    }\r\n\r\n    const searchChange = (e) => {\r\n        const target = e.target\r\n        setsearchState(target.value)\r\n    }\r\n\r\n    const filterBySearch = () => {\r\n        const regex = new RegExp(searchState, \"gi\")\r\n        const messages = messageState.reduce((acc, message) => {\r\n            console.log();\r\n            if ((message.content && message.content.match(regex)) || (message.user.name.match(regex))) {\r\n                acc.push(message);\r\n            }\r\n            return acc\r\n        }, [])\r\n        return messages\r\n    }\r\n\r\n    const starChange = () => {\r\n        let FavRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id);\r\n        if (isStared()) {\r\n            FavRef.remove();\r\n        }\r\n        else {\r\n            FavRef.set({ channelId: props.channel.id, channelName: props.channel.name })\r\n        }\r\n    }\r\n\r\n    const isStared = () => {\r\n        return Object.keys(props.favouriteChannels).includes(props.channel?.id)\r\n    }\r\n\r\n    return <div className=\"messages\">\r\n        <MessageHeader channelDesc={props.channel?.desc} channelName={props.channel?.name} uniqueUser={uniqueUserCount()} searchChange={searchChange} isPrivatechat={props.channel?.isPrivatechat}\r\n            starChange={starChange} starred={isStared()}\r\n        />\r\n\r\n        <Segment className=\"messagecontent\">\r\n            <Comment.Group>\r\n                {displayMessage()}\r\n                <div ref={currentEle => divRef = currentEle}\r\n                ></div>\r\n            </Comment.Group>\r\n        </Segment>\r\n        <MessageInput />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel: state.channel.currentChannel,\r\n        user: state.user.currentUser,\r\n        favouriteChannels: state.favouriteChannel.favouriteChannel,\r\n        message:state.message?.message,\r\n        messagefile:state.messageFile.messagefile\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\r\n        removefavouriteChannel: (channel) => dispatch(removefavouriteChannel(channel)),\r\n        SetMessage: (message) => dispatch(SetMessage(message)),\r\n        SetMessageFile: (messagefile) => dispatch(SetMessageFile(messagefile))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Segment, Accordion, Icon, Card, Header, Image } from \"semantic-ui-react\"\r\n\r\nconst DetailsBar = (props) => {\r\n    const [activeIndex, setactiveIndex] = useState(0)\r\n\r\n    const handleClick = (e, titleProps) => {\r\n        const { index } = titleProps\r\n        const newIndex = activeIndex === index ? -1 : index\r\n        setactiveIndex(newIndex)\r\n    }\r\n\r\n    return <Segment clearing>\r\n        <Card>\r\n            <Card.Content header='Details' />\r\n            <Card.Content extra>\r\n                # {props.channel?.name}\r\n            </Card.Content>\r\n            <Accordion>\r\n                <Accordion.Title\r\n                    active={activeIndex === 0}\r\n                    index={0}\r\n                    onClick={handleClick}>\r\n                    <Icon name='dropdown' />\r\n                    <Icon name=\"info\"></Icon>About\r\n                    </Accordion.Title>\r\n                <Accordion.Content active={activeIndex === 0} style={{ paddingLeft: \"25px\" }}>\r\n                    <p>\r\n                        {props.channel?.desc}\r\n                    </p>\r\n                </Accordion.Content>\r\n                <Accordion.Title\r\n                    active={activeIndex === 1}\r\n                    index={1}\r\n                    onClick={handleClick}\r\n                >\r\n                    <Icon name='dropdown' />\r\n                    <Icon name=\"users\"></Icon> Members <span style={{ paddingLeft: \"70px\" }}>{props.Message.message.length}</span>\r\n                </Accordion.Title>\r\n                <Accordion.Content active={activeIndex === 1} style={{ paddingLeft: \"25px\" }}>\r\n                    <Header as=\"h4\">\r\n                        {props.Message ? (\r\n                            props.Message.message.map((userName) => {\r\n                                return <div key={userName} style={{color:\"\"}}><li key={userName}>{userName}</li>\r\n                                </div>\r\n                            })\r\n                        ) : null}\r\n                    </Header>\r\n                </Accordion.Content>\r\n                <Accordion.Title\r\n                    active={activeIndex === 3}\r\n                    index={3}\r\n                    onClick={handleClick}\r\n                >\r\n                    <Icon name='dropdown' />\r\n                    <Icon name=\"file\"></Icon>Files\r\n                    </Accordion.Title>\r\n                <Accordion.Content active={activeIndex === 3} style={{ paddingLeft: \"25px\" }}>\r\n                {props.message.map((message) => {\r\n                return <div key={message.timestamp} style={{color:\"\"}}>\r\n                    { message.contentType === \"image/jpeg\"\r\n                    ?\r\n                    <Card>\r\n                    <Card.Content>\r\n                        <Card.Description >\r\n                         <Image src={message.image} style={{ width: \"100%\" }}></Image>\r\n                         </Card.Description>\r\n                         <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                         </Card.Meta>\r\n                         \r\n                    </Card.Content>\r\n                </Card>\r\n                    :\r\n                    message.contentType === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || message.contentType === \"application/msword\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file word'/>{message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        message.contentType === \"application/pdf\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={message.image} target=\"new\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to view\"><Icon name='file pdf'/>{message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        message.contentType === \"application/xml\" || message.contentType ===\"text/xml\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file excel'/>{message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        message.contentType === \"application/zip\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file archive'/>{message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        message.contentType === \"text/plain\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={message.image} target=\"new\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to view\"><Icon name='file'/>{message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        message.contentType === \"application/ppt\" || message.contentType ===\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file powerpoint'/>{message.fileName}</a></Card.Description>\r\n                                <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                                </Card.Meta>\r\n                               \r\n                            </Card.Content>\r\n                        </Card>\r\n                        :\r\n                        message.contentType === \"text/csv\" \r\n                        ?\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <Card.Description >\r\n                                <a href={message.image} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click here to download\"><Icon name='file excel'/>{message.fileName}</a></Card.Description>\r\n                         <Card.Meta style={{fontSize:\"13px\"}}> Sent By  {message.user.name} {message.fileSize}\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                        :null \r\n            }\r\n                    </div>\r\n         }) \r\n        }\r\n                </Accordion.Content>\r\n                <Accordion.Title\r\n                    active={activeIndex === 2}\r\n                    index={2}\r\n                    onClick={handleClick}\r\n                >\r\n                    <Icon name='dropdown' />\r\n                    <Icon name=\"edit\"></Icon>Created By\r\n                    </Accordion.Title>\r\n                <Accordion.Content active={activeIndex === 2} style={{ paddingLeft: \"25px\" }}>\r\n                    <Header as=\"h3\">\r\n                        <Image size=\"mini\" circular src={props.channel?.created_by?.avatar} />\r\n                        {props.channel?.created_by?.name}\r\n                    </Header>\r\n                </Accordion.Content>\r\n            </Accordion>\r\n        </Card>\r\n    </Segment>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel: state.channel.currentChannel,\r\n        user: state.user.currentUser,\r\n        Message: state.Message,\r\n        message:state.messageFile.messagefile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DetailsBar)","import React from 'react';\r\nimport { SideBar } from \"./components/Sidebar\";\r\nimport Messages from \"./components/Message/Message\"\r\n\r\nimport './App.css';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport DetailsBar from './components/Message/DetailsBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <Grid columns=\"equal\">\r\n      <SideBar />\r\n      <Grid.Column className=\"messagepanel\">\r\n        <Messages />\r\n      </Grid.Column>\r\n      <Grid.Column style={{paddingTop:\"25px\",padding:\"25px\"}} width={4}>\r\n        <DetailsBar/>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\nexport default  App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { SET_USER, SET_CHANNEL, SET_FAVOURITECHANNEL, REMOVE_FAVOURITECHANNEL, MESSAGE,MESSAGE_FILE } from './actiontypes';\r\nimport { combineReducers } from \"redux\";\r\n\r\nlet defaultUserState = {\r\n    currentUser: null\r\n}\r\n\r\nconst userReducer = (state = defaultUserState, action) => {\r\n    if (action.type === SET_USER) {\r\n        let payload = action.payload;\r\n        state = { ...payload };\r\n        return state;\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nlet defaultMessageFileState = {\r\n    messagefile: null\r\n}\r\n\r\nconst messageFileReducer = (state = defaultMessageFileState , action) => {\r\n    if (action.type === MESSAGE_FILE) {\r\n        let payload = action.payload;\r\n        state = { ...payload };\r\n        return state;\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nlet fileNameState = {\r\n    message: null\r\n}\r\n\r\nconst MessageReducer = (state = fileNameState, action) => {\r\n    if (action.type === MESSAGE) {\r\n        let payload = action.payload;\r\n        state = { ...payload };\r\n        return state;\r\n    }\r\n    return state;\r\n}\r\n\r\nlet defaultChannelState={\r\n    currentChannel:null,\r\n    loading:true\r\n}\r\n\r\nconst channelReducer = (state = defaultChannelState, action) => {\r\n    if (action.type === SET_CHANNEL) {\r\n        let payload = action.payload;\r\n        state = { ...payload };\r\n        state.loading=false;\r\n        return state;\r\n    }\r\n    return state;\r\n}\r\n\r\nlet defaultFavouriteChannelState={\r\n    favouriteChannel:{}\r\n}\r\n\r\nconst favouriteChannelReducer = (state = defaultFavouriteChannelState, action) => {\r\n    if (action.type === SET_FAVOURITECHANNEL) {\r\n        let payload = action.payload.favouriteChannel;\r\n        let updatedState = { ...state.favouriteChannel };\r\n        updatedState[payload.channelId]=payload.channelName\r\n        return {favouriteChannel: updatedState};\r\n    }\r\n\r\n    else  if (action.type === REMOVE_FAVOURITECHANNEL) {\r\n        let payload = action.payload.favouriteChannel;\r\n        let updatedState = { ...state.favouriteChannel };\r\n        delete updatedState[payload.channelId]\r\n        return {favouriteChannel: updatedState};\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const combinedReducers = combineReducers({user: userReducer,channel:channelReducer,favouriteChannel:favouriteChannelReducer,Message:MessageReducer,messageFile:messageFileReducer})","import React, { useState } from 'react';\r\nimport { Grid, Form, Segment, Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css'\r\nimport firebase from '../base/firebase';\r\n\r\nconst Register = () => {\r\n    let user = {\r\n        userName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmpassword: ''\r\n    }\r\n    let errors = [];\r\n\r\n    let userCollectionRef = firebase.database().ref('users');\r\n    const [userState, setuserState] = useState(user);\r\n    const [errorState, seterrorState] = useState(errors);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n    const handleInput = (event) => {\r\n        let target = event.target;\r\n        setuserState((currentState) => {\r\n            let currentuser = { ...currentState };\r\n            currentuser[target.name] = target.value;\r\n            return currentuser;\r\n        })\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (isFormEmpty()) {\r\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\r\n            return false;\r\n        }\r\n        else if (!checkPassword()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const isFormEmpty = () => {\r\n        return !userState.userName.length ||\r\n            !userState.password.length ||\r\n            !userState.confirmpassword.length ||\r\n            !userState.email.length;\r\n    }\r\n\r\n    const checkPassword = () => {\r\n        if (userState.password.length < 8) {\r\n            seterrorState((error) => error.concat({ message: \"Password length should be greater than 8\" }));\r\n            return false;\r\n        }\r\n        else if (userState.password !== userState.confirmpassword) {\r\n            seterrorState((error) => error.concat({ message: \"Password and Confirm Password does not match\" }));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        seterrorState(() => []);\r\n        setIsSuccess(false);\r\n        if (checkForm()) {\r\n            setIsLoading(true);\r\n            firebase.auth()\r\n                .createUserWithEmailAndPassword(userState.email, userState.password)\r\n                .then(createdUser => {\r\n                    setIsLoading(false);\r\n                    updateuserDetails(createdUser);\r\n                    console.log(createdUser);\r\n                })\r\n\r\n                .catch(serverError => {\r\n                    setIsLoading(false);\r\n                    seterrorState((error) => error.concat(serverError));\r\n                    console.log(serverError);\r\n                })\r\n        }\r\n    }\r\n\r\n    const updateuserDetails = (createdUser) => {\r\n        if (createdUser) {\r\n            setIsLoading(true);\r\n            createdUser.user\r\n                .updateProfile({\r\n                    displayName: userState.userName,\r\n                    photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`\r\n                })\r\n                .then(() => {\r\n                    setIsLoading(false);\r\n                    saveUserInDB(createdUser);\r\n                })\r\n                .catch((serverError) => {\r\n                    setIsLoading(false);\r\n                    seterrorState((error) => error.concat(serverError));\r\n                })\r\n        }\r\n    }\r\n\r\n    const saveUserInDB = (createdUser) => {\r\n        setIsLoading(true);\r\n        userCollectionRef.child(createdUser.user.uid).set({\r\n            displayName: createdUser.user.displayName,\r\n            photoURL: createdUser.user.photoURL\r\n        }).then(() => {\r\n            setIsLoading(false);\r\n            setIsSuccess(true);\r\n        })\r\n            .catch(serverError => {\r\n                setIsLoading(false);\r\n                seterrorState((error) => error.concat(serverError));\r\n            })\r\n    }\r\n\r\n    const formaterrors = () => {\r\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\r\n    }\r\n\r\n    return (<Grid verticalAlign=\"top\" textAlign=\"center\" className=\"grid-form\" >\r\n        <Grid.Column style={{ maxWidth: '500px' }}>\r\n            <img src=\"Screen-Shot-2019-01-17-at-2.29.34-PM.png\" alt=\"logo\" style={{ marginTop: \"50px\", width: \"40%\" }}></img>\r\n            <p className=\"p-refreshed_page__heading\">Create Account</p>\r\n            <p className=\"p-refreshed_page__sub_heading\">We suggest using the email address you use at work.</p>\r\n            <Form onSubmit={onSubmit}>\r\n                <Segment stacked>\r\n                    <Form.Input\r\n                        name=\"userName\"\r\n                        value={userState.userName}\r\n                        icon=\"user\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"text\"\r\n                        placeholder=\"User Name\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"email\"\r\n                        value={userState.email}\r\n                        icon=\"mail\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"email\"\r\n                        placeholder=\"User Email\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"password\"\r\n                        value={userState.password}\r\n                        icon=\"lock\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"password\"\r\n                        placeholder=\"User Password\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"confirmpassword\"\r\n                        value={userState.confirmpassword}\r\n                        icon=\"lock\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm Password\"\r\n                    />\r\n                </Segment>\r\n                {/* <Button disabled={isLoading} loading={isLoading} >Sign In with Email</Button> */}\r\n                <Button disabled={isLoading} loading={isLoading} fluid={true} style={{ backgroundColor: \"#4a154b\", color: \"white\", fontSize: \"120%\" }}>Continue</Button>\r\n            </Form>\r\n            {errorState.length > 0 && <Message error>\r\n                <h3>Errors</h3>\r\n                {formaterrors()}\r\n            </Message>\r\n            }\r\n            {isSuccess && <Message success>\r\n                <h3>Successfully Registered</h3>\r\n            </Message>\r\n            }\r\n            <Message>\r\n                Already an User? <Link to=\"/login\" >Login </Link>\r\n            </Message>\r\n        </Grid.Column>\r\n    </Grid>)\r\n}\r\n\r\nexport default Register\r\n\r\n","import React, { useCallback, useState } from 'react';\r\nimport { Grid, Form, Segment, Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport firebase from '../base/firebase';\r\n\r\nconst ForgotPassword = ({ history }) => {\r\n\r\n    let user = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    let errors = [];\r\n    let succ = [];\r\n\r\n\r\n    const [userState, setuserState] = useState(user);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorState, seterrorState] = useState(errors);\r\n    const [succState, setsuccState] = useState(succ);\r\n\r\n\r\n    const handleInput = (event) => {\r\n        let target = event.target;\r\n        setuserState((currentState) => {\r\n            let currentuser = { ...currentState };\r\n            currentuser[target.name] = target.value;\r\n            return currentuser;\r\n        })\r\n    }\r\n\r\n    const formaterrors = () => {\r\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\r\n    }\r\n\r\n    const formatsuccess = () => {\r\n        return succState.map((succ, index) => <p key={index}>{succ}</p>)\r\n    }\r\n    const handleForgotPassword = useCallback(\r\n        async event => {\r\n            event.preventDefault();\r\n            const { email } = event.target.elements;\r\n            try {\r\n                await firebase\r\n                    .auth()\r\n                    .sendPasswordResetEmail(email.value);\r\n                setIsLoading(false);\r\n                seterrorState(\"\")\r\n                setsuccState((message) => message.concat(\"We have just sent you an email to change your password!\"));\r\n                // history.push(\"/\");\r\n            } catch (serverError) {\r\n                setIsLoading(false);\r\n                setsuccState(\"\")\r\n                seterrorState((error) => error.concat(serverError));\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n\r\n    return <Grid verticalAlign=\"top\" textAlign=\"center\" className=\"grid-form\" >\r\n        <Grid.Column style={{ maxWidth: '500px' }}>\r\n            <img src=\"Screen-Shot-2019-01-17-at-2.29.34-PM.png\" alt=\"logo\"style={{ marginTop: \"50px\", width: \"40%\" }}></img>\r\n            <p className=\"p-refreshed_page__heading\">Forgot Passowrd</p>\r\n            <p className=\"p-refreshed_page__sub_heading\">What email address are you using on Slack ?</p>\r\n            <Form onSubmit={handleForgotPassword}>\r\n                <Segment stacked>\r\n                    <Form.Input\r\n                        name=\"email\"\r\n                        value={userState.email}\r\n                        icon=\"mail\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"email\"\r\n                        placeholder=\"User Email\"\r\n                    />\r\n                </Segment>\r\n                <Button disabled={isLoading} loading={isLoading} fluid={true} style={{ backgroundColor: \"#4a154b\", color: \"white\", fontSize: \"120%\" }}>Reset My Password</Button>\r\n            </Form>\r\n            {errorState.length > 0 && <Message error>\r\n                <h3>Errors</h3>\r\n                {formaterrors()}\r\n            </Message>\r\n            }\r\n\r\n            {succState.length > 0 && <Message success>\r\n                <h3>Success</h3>\r\n                {formatsuccess()}\r\n            </Message>\r\n            }\r\n\r\n            <Message>\r\n                Not an User? <Link to=\"/register\" >Register </Link>\r\n            </Message>\r\n            <Message>\r\n                Already an User?  <Link to=\"/login\">Login </Link>\r\n            </Message>\r\n        </Grid.Column>\r\n    </Grid>\r\n}\r\n\r\nexport default ForgotPassword;","import React, { useState } from 'react';\r\nimport { Grid, Form, Segment,  Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport firebase from '../base/firebase';\r\n\r\nconst Login = () => {\r\n    let user = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    let errors = [];\r\n\r\n    const [userState, setuserState] = useState(user);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorState, seterrorState] = useState(errors);\r\n\r\n    // var provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    const handleInput = (event) => {\r\n        let target = event.target;\r\n        setuserState((currentState) => {\r\n            let currentuser = { ...currentState };\r\n            currentuser[target.name] = target.value;\r\n            return currentuser;\r\n        })\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (isFormEmpty()) {\r\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const isFormEmpty = () => {\r\n        return !userState.password.length ||\r\n            !userState.email.length;\r\n    }\r\n\r\n    const formaterrors = () => {\r\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        seterrorState(() => []);\r\n        if (checkForm()) {\r\n            setIsLoading(true);\r\n            firebase.auth()\r\n                .signInWithEmailAndPassword(userState.email, userState.password)\r\n                .then(user => {\r\n                    setIsLoading(false);\r\n                    console.log(user);\r\n                })\r\n                .catch(serverError => {\r\n                    setIsLoading(false);\r\n                    seterrorState((error) => error.concat(serverError));\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    // const googleUser = () => {\r\n    //     firebase.auth().signInWithPopup(provider).then(function (result) {\r\n    //         // This gives you a Google Access Token. You can use it to access the Google API.\r\n    //         var token = result.credential.accessToken;\r\n    //         // The signed-in user info.\r\n    //         var user = result.user;\r\n    //         firebase.auth()\r\n    //         .createUserWithEmailAndPassword(userState.email, userState.password)\r\n    //         .then(createdUser => {\r\n    //             createdUser.user\r\n    //             .updateProfile({\r\n    //                 displayName: user.displayName,\r\n    //             })\r\n    //             console.log(createdUser);\r\n    //         })\r\n    //         console.log(user.displayName);\r\n    //             try {\r\n    //                firebase\r\n    //                 .database().ref(\"users\").push({\r\n    //                     displayName :user.displayName,\r\n    //                     name:user.displayName\r\n    //                 })\r\n    //             } catch (error) {\r\n    //               console.log(error);\r\n    //             }\r\n            \r\n    //     }).catch(function (error) {\r\n    //         // Handle Errors here.\r\n    //         var errorCode = error.code;\r\n    //         var errorMessage = error.message;\r\n    //         // The email of the user's account used.\r\n    //         var email = error.email;\r\n    //         // The firebase.auth.AuthCredential type that was used.\r\n    //         var credential = error.credential;\r\n    //         // ...\r\n    //     });\r\n    // }\r\n\r\n    return <Grid verticalAlign=\"top\" textAlign=\"center\" className=\"grid-form\" >\r\n        <Grid.Column style={{ maxWidth: '500px' }}>\r\n            <img src=\"Screen-Shot-2019-01-17-at-2.29.34-PM.png\" alt=\"logo\" style={{ marginTop: \"50px\", width: \"40%\" }}></img>\r\n            <p className=\"p-refreshed_page__heading\">Sign in to Slack</p>\r\n            <br></br>\r\n            {/* <p className=\"p-refreshed_page__sub_heading\">Continue with the Google account or email address you use to sign in.</p> */}\r\n            {/* <Button color=\"primary\" basic fluid={true} style={{marginBottom:\"30px\",fontSize:\"80%\"}} onClick={googleUser}> */}\r\n            {/* <img src=\"Capture.PNG\" style={{width:\"80%\"}}></img> */}\r\n            {/* </Button> */}\r\n             {/* <div className=\"c-horizontal_content_rule margin_bottom_150\"><hr class=\"c-horizontal_content_rule__leftrule\"/>\r\n            <div className=\"c-horizontal_content_rule__content\"><strong class=\"sk_light_gray_always\">OR</strong></div>\r\n            <hr className=\"c-horizontal_content_rule__rightrule\"/></div> */}\r\n            <Form onSubmit={onSubmit}>\r\n                <Segment stacked>\r\n                    <Form.Input\r\n                        name=\"email\"\r\n                        value={userState.email}\r\n                        icon=\"mail\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"email\"\r\n                        placeholder=\"User Email\"\r\n                    />\r\n                    <Form.Input\r\n                        name=\"password\"\r\n                        value={userState.password}\r\n                        icon=\"lock\"\r\n                        iconPosition=\"left\"\r\n                        onChange={handleInput}\r\n                        type=\"password\"\r\n                        placeholder=\"User Password\"\r\n                    />\r\n                </Segment>\r\n                <Button disabled={isLoading} loading={isLoading} fluid={true} style={{backgroundColor:\"#4a154b\", color:\"white\" ,fontSize:\"120%\"}}>Sign In with Email</Button>\r\n            </Form>\r\n            {errorState.length > 0 && <Message error>\r\n                <h3>Errors</h3>\r\n                {formaterrors()}\r\n            </Message>\r\n            }\r\n            <Message>\r\n                Not an User? <Link to=\"/register\">Register </Link>\r\n            </Message>\r\n            <Message>\r\n                Forgot Password? <Link to=\"/forgotPassword\">Forgot Password </Link>\r\n            </Message>\r\n        </Grid.Column>        \r\n    </Grid>\r\n    \r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport \"./style.css\"\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst AppLoader = (props) => {\r\n    return (<Dimmer active={props.loading}>\r\n        <Loader size=\"huge\" content=\"Loading...\" />\r\n    </Dimmer>)\r\n}\r\n\r\nexport default AppLoader\r\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter as Router, Switch, Route, withRouter } from \"react-router-dom\";\r\nimport { Provider, connect } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport { combinedReducers } from './store/reducer'\r\nimport { setUser } from './store/actioncreator'\r\n\r\nimport Register from './components/Register';\r\nimport ForgotPassword from './components/Forgot_Paaword';\r\nimport Login from './components/Login';\r\nimport firebase from './base/firebase'\r\nimport AppLoader from './components/Loader'\r\n\r\nconst store = createStore(combinedReducers)\r\n\r\nconst Index = (props) => {\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        props.setUser(user)\r\n        props.history.push(\"/\")\r\n      } \r\n      else if(props.location.pathname===\"/forgotpassword\"){\r\n        props.setUser(null)\r\n        props.history.push(\"/forgotpassword\")\r\n      }\r\n      else {\r\n        props.setUser(null)\r\n        props.history.push(\"/login\")\r\n      }\r\n    })\r\n  },[]);\r\n\r\n  return (\r\n    <>\r\n    <AppLoader loading={props.loading && props.location.pathname===\"/\"} />\r\n     <Switch>\r\n      <Route path=\"/forgotpassword\" component={ForgotPassword}></Route>\r\n      <Route path=\"/login\" component={Login}></Route>\r\n      <Route path=\"/register\" component={Register}></Route>\r\n      <Route path=\"/\" component={App}></Route>\r\n    </Switch>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.user.currentUser,\r\n    loading: state.channel.loading\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => { dispatch(setUser(user)) }\r\n  }\r\n}\r\n\r\n\r\nconst IndexWithRouter = withRouter(connect(mapStateToProps, mapDispatchToProps)(Index))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <IndexWithRouter />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}